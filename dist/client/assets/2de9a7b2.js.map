{"version":3,"file":"2de9a7b2.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/hooks/useProductOptions/useProductOptions.client.js","../../../node_modules/@shopify/hydrogen/dist/esnext/utilities/image_size.js","../../../node_modules/@shopify/hydrogen/dist/esnext/utilities/video_parameters.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/Image/Image.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/Video/Video.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/ExternalVideo/ExternalVideo.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/MediaFile/MediaFile.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/cart-queries.js","../../../node_modules/@shopify/hydrogen/dist/esnext/storefront-api-types.js","../../../node_modules/@shopify/hydrogen/dist/esnext/foundation/useShop/use-shop.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/hooks.client.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/context.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartLineProvider/context.js","../../../node_modules/@shopify/hydrogen/dist/esnext/hooks/useProductOptions/helpers.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/ProductOptionsProvider/ProductOptionsProvider.client.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/ProductPrice/ProductPrice.client.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/BuyNowButton/BuyNowButton.client.js","../../../src/components/ProductDetails.client.jsx"],"sourcesContent":["import { useContext } from 'react';\nimport { ProductOptionsContext } from '../../components/ProductOptionsProvider/context';\nexport function useProductOptions() {\n    const context = useContext(ProductOptionsContext);\n    if (!context) {\n        throw new Error(`'useProductOptions' must be a child of <ProductOptionsProvider/>`);\n    }\n    return context;\n}\n","// TODO: Are there other CDNs missing from here?\nconst PRODUCTION_CDN_HOSTNAMES = [\n    'cdn.shopify.com',\n    'cdn.shopifycdn.net',\n    'shopify-assets.shopifycdn.com',\n    'shopify-assets.shopifycdn.net',\n];\nconst LOCAL_CDN_HOSTNAMES = ['spin.dev'];\nconst ALL_CDN_HOSTNAMES = [...PRODUCTION_CDN_HOSTNAMES, ...LOCAL_CDN_HOSTNAMES];\n// based on the default width sizes used by the Shopify liquid HTML tag img_tag plus a 2560 width to account for 2k resolutions\n// reference: https://shopify.dev/api/liquid/filters/html-filters#image_tag\nexport const IMG_SRC_SET_SIZES = [352, 832, 1200, 1920, 2560];\n/**\n * Adds image size parameters to an image URL hosted by Shopify's CDN\n */\nexport function addImageSizeParametersToUrl({ src, width, height, crop, scale, }) {\n    const newUrl = new URL(src);\n    const multipliedScale = scale ?? 1;\n    if (width) {\n        let finalWidth;\n        if (typeof width === 'string') {\n            finalWidth = (IMG_SRC_SET_SIZES[0] * multipliedScale).toString();\n        }\n        else {\n            finalWidth = (Number(width) * multipliedScale).toString();\n        }\n        newUrl.searchParams.append('width', finalWidth);\n    }\n    if (height && typeof height === 'number') {\n        newUrl.searchParams.append('height', (height * multipliedScale).toString());\n    }\n    crop && newUrl.searchParams.append('crop', crop);\n    // for now we intentionally leave off the scale param, and instead multiple width & height by scale instead\n    // scale && newUrl.searchParams.append('scale', scale.toString());\n    return newUrl.toString();\n}\nexport function shopifyImageLoader(params) {\n    const newSrc = new URL(params.src);\n    const isShopifyServedImage = ALL_CDN_HOSTNAMES.some((allowedHostname) => newSrc.hostname.endsWith(allowedHostname));\n    if (!isShopifyServedImage ||\n        (!params.width && !params.height && !params.crop && !params.scale)) {\n        return params.src;\n    }\n    return addImageSizeParametersToUrl(params);\n}\n/**\n * Width and height are determined using the followiing priority list:\n * 1. `loaderOptions`'s width/height\n * 2. `elementProps`'s width/height\n * 3. `data`'s width/height\n *\n * If only one of `width` or `height` are defined, then the other will attempt to be calculated based on the Image's aspect ratio,\n * provided that both `data.width` and `data.height` are available. If not, then the aspect ratio cannot be determined and the missing\n * value will reamin as `null`\n */\nexport function getShopifyImageDimensions({ data: sfapiImage, loaderOptions, elementProps, }) {\n    let aspectRatio = null;\n    if (sfapiImage?.width && sfapiImage?.height) {\n        aspectRatio = sfapiImage?.width / sfapiImage?.height;\n    }\n    //  * 1. `loaderOptions`'s width/height\n    if (loaderOptions?.width || loaderOptions?.height) {\n        return {\n            width: loaderOptions?.width ??\n                (aspectRatio && typeof loaderOptions.height === 'number'\n                    ? Math.round(aspectRatio * loaderOptions.height)\n                    : null),\n            height: loaderOptions?.height ??\n                (aspectRatio && typeof loaderOptions.width === 'number'\n                    ? Math.round(aspectRatio * loaderOptions.width)\n                    : null),\n        };\n    }\n    //  * 2. `elementProps`'s width/height\n    if (elementProps?.width || elementProps?.height) {\n        return {\n            width: elementProps?.width ??\n                (aspectRatio && typeof elementProps.height === 'number'\n                    ? Math.round(aspectRatio * elementProps.height)\n                    : null),\n            height: elementProps?.height ??\n                (aspectRatio && typeof elementProps.width === 'number'\n                    ? Math.round(aspectRatio * elementProps.width)\n                    : null),\n        };\n    }\n    //  * 3. `data`'s width/height\n    if (sfapiImage?.width || sfapiImage?.height) {\n        return {\n            // can't calculate the aspect ratio here\n            width: sfapiImage?.width ?? null,\n            height: sfapiImage?.height ?? null,\n        };\n    }\n    return { width: null, height: null };\n}\n","import { useMemo } from 'react';\nexport function addParametersToEmbeddedVideoUrl(url, parameters) {\n    if (parameters == null) {\n        return url;\n    }\n    const params = Object.keys(parameters).reduce((accumulator, param) => {\n        const value = parameters[param];\n        if (value == null) {\n            return accumulator;\n        }\n        return accumulator + `&${param}=${value}`;\n    }, '');\n    return `${url}?${params}`;\n}\nexport function useEmbeddedVideoUrl(url, parameters) {\n    return useMemo(() => {\n        if (!parameters) {\n            return url;\n        }\n        return addParametersToEmbeddedVideoUrl(url, parameters);\n    }, [url, parameters]);\n}\n","import * as React from 'react';\nimport { getShopifyImageDimensions, shopifyImageLoader, addImageSizeParametersToUrl, IMG_SRC_SET_SIZES, } from '../../utilities';\n/**\n * The `Image` component renders an image for the Storefront API's\n * [Image object](https://shopify.dev/api/storefront/reference/common-objects/image) by using the `data` prop, or a custom location by using the `src` prop. You can [customize this component](https://shopify.dev/api/hydrogen/components#customizing-hydrogen-components) using passthrough props.\n *\n * An image's width and height are determined using the following priority list:\n * 1. The width and height values for the `loaderOptions` prop\n * 2. The width and height values for bare props\n * 3. The width and height values for the `data` prop\n *\n * If only one of `width` or `height` are defined, then the other will attempt to be calculated based on the image's aspect ratio,\n * provided that both `data.width` and `data.height` are available. If `data.width` and `data.height` aren't available, then the aspect ratio cannot be determined and the missing\n * value will remain as `null`\n */\nexport function Image(props) {\n    if (!props.data && !props.src) {\n        throw new Error(`<Image/>: requires either a 'data' or 'src' prop.`);\n    }\n    if (__HYDROGEN_DEV__ && props.data && props.src) {\n        console.warn(`<Image/>: using both 'data' and 'src' props is not supported; using the 'data' prop by default`);\n    }\n    if (props.data) {\n        return React.createElement(ShopifyImage, { ...props });\n    }\n    else {\n        return React.createElement(ExternalImage, { ...props });\n    }\n}\nfunction ShopifyImage({ data, width, height, loading, loader = shopifyImageLoader, loaderOptions, widths, ...rest }) {\n    if (!data.url) {\n        throw new Error(`<Image/>: the 'data' prop requires the 'url' property`);\n    }\n    if (__HYDROGEN_DEV__ && !data.altText && !rest.alt) {\n        console.warn(`<Image/>: the 'data' prop should have the 'altText' property, or the 'alt' prop, and one of them should not be empty. ${`Image: ${data.id ?? data.url}`}`);\n    }\n    const { width: imgElementWidth, height: imgElementHeight } = getShopifyImageDimensions({\n        data,\n        loaderOptions,\n        elementProps: {\n            width,\n            height,\n        },\n    });\n    if (__HYDROGEN_DEV__ && (!imgElementWidth || !imgElementHeight)) {\n        console.warn(`<Image/>: the 'data' prop requires either 'width' or 'data.width', and 'height' or 'data.height' properties. ${`Image: ${data.id ?? data.url}`}`);\n    }\n    let finalSrc = data.url;\n    if (loader) {\n        finalSrc = loader({\n            ...loaderOptions,\n            src: data.url,\n            width: imgElementWidth,\n            height: imgElementHeight,\n        });\n        if (typeof finalSrc !== 'string' || !finalSrc) {\n            throw new Error(`<Image/>: 'loader' did not return a valid string. ${`Image: ${data.id ?? data.url}`}`);\n        }\n    }\n    // determining what the intended width of the image is. For example, if the width is specified and lower than the image width, then that is the maximum image width\n    // to prevent generating a srcset with widths bigger than needed or to generate images that would distort because of being larger than original\n    const maxWidth = width && imgElementWidth && width < imgElementWidth\n        ? width\n        : imgElementWidth;\n    const finalSrcset = rest.srcSet ??\n        internalImageSrcSet({\n            ...loaderOptions,\n            widths,\n            src: data.url,\n            width: maxWidth,\n            height: imgElementHeight,\n            loader,\n        });\n    /* eslint-disable hydrogen/prefer-image-component */\n    return (React.createElement(\"img\", { id: data.id ?? '', alt: data.altText ?? rest.alt ?? '', loading: loading ?? 'lazy', ...rest, src: finalSrc, width: imgElementWidth ?? undefined, height: imgElementHeight ?? undefined, srcSet: finalSrcset }));\n    /* eslint-enable hydrogen/prefer-image-component */\n}\nfunction ExternalImage({ src, width, height, alt, loader, loaderOptions, widths, loading, ...rest }) {\n    if (!width || !height) {\n        throw new Error(`<Image/>: when 'src' is provided, 'width' and 'height' are required and need to be valid values (i.e. greater than zero). Provided values: 'src': ${src}, 'width': ${width}, 'height': ${height}`);\n    }\n    if (__HYDROGEN_DEV__ && !alt) {\n        console.warn(`<Image/>: when 'src' is provided, 'alt' should also be provided. ${`Image: ${src}`}`);\n    }\n    if (widths &&\n        Array.isArray(widths) &&\n        widths.some((size) => isNaN(size)))\n        throw new Error(`<Image/>: the 'widths' property must be an array of numbers`);\n    let finalSrc = src;\n    if (loader) {\n        finalSrc = loader({ src, width, height, ...loaderOptions });\n        if (typeof finalSrc !== 'string' || !finalSrc) {\n            throw new Error(`<Image/>: 'loader' did not return a valid string`);\n        }\n    }\n    let finalSrcset = rest.srcSet ?? undefined;\n    if (!finalSrcset && loader && widths) {\n        // Height is a requirement in the LoaderProps, so  to keep the aspect ratio, we must determine the height based on the default values\n        const heightToWidthRatio = parseInt(height.toString()) / parseInt(width.toString());\n        finalSrcset = widths\n            ?.map((width) => parseInt(width, 10))\n            ?.map((width) => `${loader({\n            ...loaderOptions,\n            src,\n            width,\n            height: Math.floor(width * heightToWidthRatio),\n        })} ${width}w`)\n            .join(', ');\n    }\n    /* eslint-disable hydrogen/prefer-image-component */\n    return (React.createElement(\"img\", { ...rest, src: finalSrc, \n        // @ts-expect-error TS doesn't understand that it could exist\n        width: loaderOptions?.width ?? width, \n        // @ts-expect-error TS doesn't understand that it could exist\n        height: loaderOptions?.height ?? height, alt: alt ?? '', loading: loading ?? 'lazy', srcSet: finalSrcset }));\n    /* eslint-enable hydrogen/prefer-image-component */\n}\nfunction internalImageSrcSet({ src, width, crop, scale, widths, loader, height, }) {\n    const hasCustomWidths = widths && Array.isArray(widths);\n    if (hasCustomWidths && widths.some((size) => isNaN(size))) {\n        throw new Error(`<Image/>: the 'widths' must be an array of numbers`);\n    }\n    let aspectRatio = 1;\n    if (width && height) {\n        aspectRatio = Number(height) / Number(width);\n    }\n    let setSizes = hasCustomWidths ? widths : IMG_SRC_SET_SIZES;\n    if (!hasCustomWidths &&\n        width &&\n        width < IMG_SRC_SET_SIZES[IMG_SRC_SET_SIZES.length - 1]) {\n        setSizes = IMG_SRC_SET_SIZES.filter((size) => size <= width);\n    }\n    const srcGenerator = loader ? loader : addImageSizeParametersToUrl;\n    return setSizes\n        .map((size) => `${srcGenerator({\n        src,\n        width: size,\n        // height is not applied if there is no crop\n        // if there is crop, then height is applied as a ratio of the original width + height aspect ratio * size\n        height: crop ? Number(size) * aspectRatio : undefined,\n        crop,\n        scale,\n    })} ${size}w`)\n        .join(', ');\n}\n","import React from 'react';\nimport { shopifyImageLoader } from '../../utilities';\n/**\n * The `Video` component renders a `video` for the Storefront API's [Video object](https://shopify.dev/api/storefront/reference/products/video).\n */\nexport function Video(props) {\n    const { data, previewImageOptions, id = data.id, playsInline = true, controls = true, ...passthroughProps } = props;\n    const posterUrl = shopifyImageLoader({\n        src: data.previewImage?.url ?? '',\n        ...previewImageOptions,\n    });\n    if (!data.sources) {\n        throw new Error(`<Video/> requires a 'data.sources' array`);\n    }\n    return (\n    // eslint-disable-next-line jsx-a11y/media-has-caption\n    React.createElement(\"video\", { ...passthroughProps, id: id, playsInline: playsInline, controls: controls, poster: posterUrl }, data.sources.map((source) => {\n        if (!(source?.url && source?.mimeType)) {\n            throw new Error(`<Video/> needs 'source.url' and 'source.mimeType'`);\n        }\n        return (React.createElement(\"source\", { key: source.url, src: source.url, type: source.mimeType }));\n    })));\n}\n","import React from 'react';\nimport { useEmbeddedVideoUrl } from '../../utilities';\n/**\n * The `ExternalVideo` component renders an embedded video for the Storefront\n * API's [ExternalVideo object](https://shopify.dev/api/storefront/reference/products/externalvideo).\n */\nexport function ExternalVideo(props) {\n    const { data, options, id = data.id, frameBorder = '0', allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture', allowFullScreen = true, ...passthroughProps } = props;\n    if (!data.embedUrl) {\n        throw new Error(`<ExternalVideo/> requires the 'embedUrl' property`);\n    }\n    const url = useEmbeddedVideoUrl(data.embedUrl, options);\n    return (React.createElement(\"iframe\", { ...passthroughProps, id: id ?? data.embedUrl, frameBorder: frameBorder, allow: allow, allowFullScreen: allowFullScreen, src: url }));\n}\n","import React from 'react';\nimport { Image } from '../Image';\nimport { Video } from '../Video';\nimport { ExternalVideo } from '../ExternalVideo';\nimport { ModelViewer } from '../ModelViewer';\n/**\n * The `MediaFile` component renders the media for the Storefront API's\n * [Media object](https://shopify.dev/api/storefront/reference/products/media). It renders an `Image`, a\n * `Video`, an `ExternalVideo`, or a `ModelViewer` depending on the `mediaContentType` of the\n * `media` provided as a prop.\n */\nexport function MediaFile({ data, options, ...passthroughProps }) {\n    switch (data.mediaContentType) {\n        case 'IMAGE': {\n            const dataImage = data\n                .image;\n            if (!dataImage || !dataImage.url) {\n                console.warn(`No \"image\" property was found on the \"data\" prop for <MediaFile/>, for the \"type='image'\"`);\n                return null;\n            }\n            return (React.createElement(Image, { ...passthroughProps, data: dataImage, loaderOptions: options }));\n        }\n        case 'VIDEO':\n            return (React.createElement(Video, { ...passthroughProps, data: data, previewImageOptions: options }));\n        case 'EXTERNAL_VIDEO':\n            return (React.createElement(ExternalVideo, { ...passthroughProps, data: data, options: options }));\n        case 'MODEL_3D':\n            return (React.createElement(ModelViewer, { ...passthroughProps, data: data }));\n        default:\n            return null;\n    }\n}\n","export const CartLineAdd = (cartFragment) => `\nmutation CartLineAdd($cartId: ID!, $lines: [CartLineInput!]!, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartLinesAdd(cartId: $cartId, lines: $lines) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartCreate = (cartFragment) => `\nmutation CartCreate($input: CartInput!, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartCreate(input: $input) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartLineRemove = (cartFragment) => `\nmutation CartLineRemove($cartId: ID!, $lines: [ID!]!, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartLinesRemove(cartId: $cartId, lineIds: $lines) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartLineUpdate = (cartFragment) => `\nmutation CartLineUpdate($cartId: ID!, $lines: [CartLineUpdateInput!]!, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartLinesUpdate(cartId: $cartId, lines: $lines) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartNoteUpdate = (cartFragment) => `\nmutation CartNoteUpdate($cartId: ID!, $note: String, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartNoteUpdate(cartId: $cartId, note: $note) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartBuyerIdentityUpdate = (cartFragment) => `\nmutation CartBuyerIdentityUpdate(\n  $cartId: ID!\n  $buyerIdentity: CartBuyerIdentityInput!\n  $numCartLines: Int = 250\n  $country: CountryCode = ZZ\n) @inContext(country: $country) {\n  cartBuyerIdentityUpdate(cartId: $cartId, buyerIdentity: $buyerIdentity) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartAttributesUpdate = (cartFragment) => `\nmutation CartAttributesUpdate($attributes: [AttributeInput!]!, $cartId: ID!, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartAttributesUpdate(attributes: $attributes, cartId: $cartId) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartDiscountCodesUpdate = (cartFragment) => `\nmutation CartDiscountCodesUpdate($cartId: ID!, $discountCodes: [String!], $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartDiscountCodesUpdate(cartId: $cartId, discountCodes: $discountCodes) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartQuery = (cartFragment) => `\nquery CartQuery($id: ID!, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cart(id: $id) {\n    ...CartFragment\n  }\n}\n\n${cartFragment}\n`;\nexport const defaultCartFragment = `\nfragment CartFragment on Cart {\n  id\n  checkoutUrl\n  totalQuantity\n  buyerIdentity {\n    countryCode\n    customer {\n      id\n      email\n      firstName\n      lastName\n      displayName\n    }\n    email\n    phone\n  }\n  lines(first: $numCartLines) {\n    edges {\n      node {\n        id\n        quantity\n        attributes {\n          key\n          value\n        }\n        cost {\n          totalAmount {\n            amount\n            currencyCode\n          }\n          compareAtAmountPerQuantity {\n            amount\n            currencyCode\n          }\n        }\n        merchandise {\n          ... on ProductVariant {\n            id\n            availableForSale\n            compareAtPriceV2 {\n              ...MoneyFragment\n            }\n            priceV2 {\n              ...MoneyFragment\n            }\n            requiresShipping\n            title\n            image {\n              ...ImageFragment\n            }\n            product {\n              handle\n              title\n            }\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n  cost {\n    subtotalAmount {\n      ...MoneyFragment\n    }\n    totalAmount {\n      ...MoneyFragment\n    }\n    totalDutyAmount {\n      ...MoneyFragment\n    }\n    totalTaxAmount {\n      ...MoneyFragment\n    }\n  }\n  note\n  attributes {\n    key\n    value\n  }\n  discountCodes {\n    code\n  }\n}\n\nfragment MoneyFragment on MoneyV2 {\n  currencyCode\n  amount\n}\nfragment ImageFragment on Image {\n  id\n  url\n  altText\n  width\n  height\n}\n`;\n","/** The set of valid sort keys for the Article query. */\nexport var ArticleSortKeys;\n(function (ArticleSortKeys) {\n    /** Sort by the `author` value. */\n    ArticleSortKeys[\"Author\"] = \"AUTHOR\";\n    /** Sort by the `blog_title` value. */\n    ArticleSortKeys[\"BlogTitle\"] = \"BLOG_TITLE\";\n    /** Sort by the `id` value. */\n    ArticleSortKeys[\"Id\"] = \"ID\";\n    /** Sort by the `published_at` value. */\n    ArticleSortKeys[\"PublishedAt\"] = \"PUBLISHED_AT\";\n    /**\n     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.\n     * Don't use this sort key when no search query is specified.\n     *\n     */\n    ArticleSortKeys[\"Relevance\"] = \"RELEVANCE\";\n    /** Sort by the `title` value. */\n    ArticleSortKeys[\"Title\"] = \"TITLE\";\n    /** Sort by the `updated_at` value. */\n    ArticleSortKeys[\"UpdatedAt\"] = \"UPDATED_AT\";\n})(ArticleSortKeys || (ArticleSortKeys = {}));\n/** The set of valid sort keys for the Blog query. */\nexport var BlogSortKeys;\n(function (BlogSortKeys) {\n    /** Sort by the `handle` value. */\n    BlogSortKeys[\"Handle\"] = \"HANDLE\";\n    /** Sort by the `id` value. */\n    BlogSortKeys[\"Id\"] = \"ID\";\n    /**\n     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.\n     * Don't use this sort key when no search query is specified.\n     *\n     */\n    BlogSortKeys[\"Relevance\"] = \"RELEVANCE\";\n    /** Sort by the `title` value. */\n    BlogSortKeys[\"Title\"] = \"TITLE\";\n})(BlogSortKeys || (BlogSortKeys = {}));\n/** Card brand, such as Visa or Mastercard, which can be used for payments. */\nexport var CardBrand;\n(function (CardBrand) {\n    /** American Express. */\n    CardBrand[\"AmericanExpress\"] = \"AMERICAN_EXPRESS\";\n    /** Diners Club. */\n    CardBrand[\"DinersClub\"] = \"DINERS_CLUB\";\n    /** Discover. */\n    CardBrand[\"Discover\"] = \"DISCOVER\";\n    /** JCB. */\n    CardBrand[\"Jcb\"] = \"JCB\";\n    /** Mastercard. */\n    CardBrand[\"Mastercard\"] = \"MASTERCARD\";\n    /** Visa. */\n    CardBrand[\"Visa\"] = \"VISA\";\n})(CardBrand || (CardBrand = {}));\n/** Possible error codes that can be returned by `CartUserError`. */\nexport var CartErrorCode;\n(function (CartErrorCode) {\n    /** The input value is invalid. */\n    CartErrorCode[\"Invalid\"] = \"INVALID\";\n    /** Merchandise line was not found in cart. */\n    CartErrorCode[\"InvalidMerchandiseLine\"] = \"INVALID_MERCHANDISE_LINE\";\n    /** The input value should be less than the maximum value allowed. */\n    CartErrorCode[\"LessThan\"] = \"LESS_THAN\";\n    /** Missing discount code. */\n    CartErrorCode[\"MissingDiscountCode\"] = \"MISSING_DISCOUNT_CODE\";\n    /** Missing note. */\n    CartErrorCode[\"MissingNote\"] = \"MISSING_NOTE\";\n})(CartErrorCode || (CartErrorCode = {}));\n/** Possible error codes that can be returned by `CheckoutUserError`. */\nexport var CheckoutErrorCode;\n(function (CheckoutErrorCode) {\n    /** Checkout is already completed. */\n    CheckoutErrorCode[\"AlreadyCompleted\"] = \"ALREADY_COMPLETED\";\n    /** Input email contains an invalid domain name. */\n    CheckoutErrorCode[\"BadDomain\"] = \"BAD_DOMAIN\";\n    /** The input value is blank. */\n    CheckoutErrorCode[\"Blank\"] = \"BLANK\";\n    /** Cart does not meet discount requirements notice. */\n    CheckoutErrorCode[\"CartDoesNotMeetDiscountRequirementsNotice\"] = \"CART_DOES_NOT_MEET_DISCOUNT_REQUIREMENTS_NOTICE\";\n    /** Customer already used once per customer discount notice. */\n    CheckoutErrorCode[\"CustomerAlreadyUsedOncePerCustomerDiscountNotice\"] = \"CUSTOMER_ALREADY_USED_ONCE_PER_CUSTOMER_DISCOUNT_NOTICE\";\n    /** Discount already applied. */\n    CheckoutErrorCode[\"DiscountAlreadyApplied\"] = \"DISCOUNT_ALREADY_APPLIED\";\n    /** Discount disabled. */\n    CheckoutErrorCode[\"DiscountDisabled\"] = \"DISCOUNT_DISABLED\";\n    /** Discount expired. */\n    CheckoutErrorCode[\"DiscountExpired\"] = \"DISCOUNT_EXPIRED\";\n    /** Discount limit reached. */\n    CheckoutErrorCode[\"DiscountLimitReached\"] = \"DISCOUNT_LIMIT_REACHED\";\n    /** Discount not found. */\n    CheckoutErrorCode[\"DiscountNotFound\"] = \"DISCOUNT_NOT_FOUND\";\n    /** Checkout is already completed. */\n    CheckoutErrorCode[\"Empty\"] = \"EMPTY\";\n    /** Queue token has expired. */\n    CheckoutErrorCode[\"ExpiredQueueToken\"] = \"EXPIRED_QUEUE_TOKEN\";\n    /** Gift card has already been applied. */\n    CheckoutErrorCode[\"GiftCardAlreadyApplied\"] = \"GIFT_CARD_ALREADY_APPLIED\";\n    /** Gift card code is invalid. */\n    CheckoutErrorCode[\"GiftCardCodeInvalid\"] = \"GIFT_CARD_CODE_INVALID\";\n    /** Gift card currency does not match checkout currency. */\n    CheckoutErrorCode[\"GiftCardCurrencyMismatch\"] = \"GIFT_CARD_CURRENCY_MISMATCH\";\n    /** Gift card has no funds left. */\n    CheckoutErrorCode[\"GiftCardDepleted\"] = \"GIFT_CARD_DEPLETED\";\n    /** Gift card is disabled. */\n    CheckoutErrorCode[\"GiftCardDisabled\"] = \"GIFT_CARD_DISABLED\";\n    /** Gift card is expired. */\n    CheckoutErrorCode[\"GiftCardExpired\"] = \"GIFT_CARD_EXPIRED\";\n    /** Gift card was not found. */\n    CheckoutErrorCode[\"GiftCardNotFound\"] = \"GIFT_CARD_NOT_FOUND\";\n    /** Gift card cannot be applied to a checkout that contains a gift card. */\n    CheckoutErrorCode[\"GiftCardUnusable\"] = \"GIFT_CARD_UNUSABLE\";\n    /** The input value should be greater than or equal to the minimum value allowed. */\n    CheckoutErrorCode[\"GreaterThanOrEqualTo\"] = \"GREATER_THAN_OR_EQUAL_TO\";\n    /** The input value is invalid. */\n    CheckoutErrorCode[\"Invalid\"] = \"INVALID\";\n    /** Cannot specify country and presentment currency code. */\n    CheckoutErrorCode[\"InvalidCountryAndCurrency\"] = \"INVALID_COUNTRY_AND_CURRENCY\";\n    /** Input Zip is invalid for country provided. */\n    CheckoutErrorCode[\"InvalidForCountry\"] = \"INVALID_FOR_COUNTRY\";\n    /** Input Zip is invalid for country and province provided. */\n    CheckoutErrorCode[\"InvalidForCountryAndProvince\"] = \"INVALID_FOR_COUNTRY_AND_PROVINCE\";\n    /** Invalid province in country. */\n    CheckoutErrorCode[\"InvalidProvinceInCountry\"] = \"INVALID_PROVINCE_IN_COUNTRY\";\n    /** Queue token is invalid. */\n    CheckoutErrorCode[\"InvalidQueueToken\"] = \"INVALID_QUEUE_TOKEN\";\n    /** Invalid region in country. */\n    CheckoutErrorCode[\"InvalidRegionInCountry\"] = \"INVALID_REGION_IN_COUNTRY\";\n    /** Invalid state in country. */\n    CheckoutErrorCode[\"InvalidStateInCountry\"] = \"INVALID_STATE_IN_COUNTRY\";\n    /** The input value should be less than the maximum value allowed. */\n    CheckoutErrorCode[\"LessThan\"] = \"LESS_THAN\";\n    /** The input value should be less than or equal to the maximum value allowed. */\n    CheckoutErrorCode[\"LessThanOrEqualTo\"] = \"LESS_THAN_OR_EQUAL_TO\";\n    /** Line item was not found in checkout. */\n    CheckoutErrorCode[\"LineItemNotFound\"] = \"LINE_ITEM_NOT_FOUND\";\n    /** Checkout is locked. */\n    CheckoutErrorCode[\"Locked\"] = \"LOCKED\";\n    /** Missing payment input. */\n    CheckoutErrorCode[\"MissingPaymentInput\"] = \"MISSING_PAYMENT_INPUT\";\n    /** Not enough in stock. */\n    CheckoutErrorCode[\"NotEnoughInStock\"] = \"NOT_ENOUGH_IN_STOCK\";\n    /** Input value is not supported. */\n    CheckoutErrorCode[\"NotSupported\"] = \"NOT_SUPPORTED\";\n    /** The input value needs to be blank. */\n    CheckoutErrorCode[\"Present\"] = \"PRESENT\";\n    /** Shipping rate expired. */\n    CheckoutErrorCode[\"ShippingRateExpired\"] = \"SHIPPING_RATE_EXPIRED\";\n    /** Throttled during checkout. */\n    CheckoutErrorCode[\"ThrottledDuringCheckout\"] = \"THROTTLED_DURING_CHECKOUT\";\n    /** The input value is too long. */\n    CheckoutErrorCode[\"TooLong\"] = \"TOO_LONG\";\n    /** The amount of the payment does not match the value to be paid. */\n    CheckoutErrorCode[\"TotalPriceMismatch\"] = \"TOTAL_PRICE_MISMATCH\";\n    /** Unable to apply discount. */\n    CheckoutErrorCode[\"UnableToApply\"] = \"UNABLE_TO_APPLY\";\n})(CheckoutErrorCode || (CheckoutErrorCode = {}));\n/** The set of valid sort keys for the Collection query. */\nexport var CollectionSortKeys;\n(function (CollectionSortKeys) {\n    /** Sort by the `id` value. */\n    CollectionSortKeys[\"Id\"] = \"ID\";\n    /**\n     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.\n     * Don't use this sort key when no search query is specified.\n     *\n     */\n    CollectionSortKeys[\"Relevance\"] = \"RELEVANCE\";\n    /** Sort by the `title` value. */\n    CollectionSortKeys[\"Title\"] = \"TITLE\";\n    /** Sort by the `updated_at` value. */\n    CollectionSortKeys[\"UpdatedAt\"] = \"UPDATED_AT\";\n})(CollectionSortKeys || (CollectionSortKeys = {}));\n/**\n * The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.\n * If a territory doesn't have a country code value in the `CountryCode` enum, it might be considered a subdivision\n * of another country. For example, the territories associated with Spain are represented by the country code `ES`,\n * and the territories associated with the United States of America are represented by the country code `US`.\n *\n */\nexport var CountryCode;\n(function (CountryCode) {\n    /** Ascension Island. */\n    CountryCode[\"Ac\"] = \"AC\";\n    /** Andorra. */\n    CountryCode[\"Ad\"] = \"AD\";\n    /** United Arab Emirates. */\n    CountryCode[\"Ae\"] = \"AE\";\n    /** Afghanistan. */\n    CountryCode[\"Af\"] = \"AF\";\n    /** Antigua & Barbuda. */\n    CountryCode[\"Ag\"] = \"AG\";\n    /** Anguilla. */\n    CountryCode[\"Ai\"] = \"AI\";\n    /** Albania. */\n    CountryCode[\"Al\"] = \"AL\";\n    /** Armenia. */\n    CountryCode[\"Am\"] = \"AM\";\n    /** Netherlands Antilles. */\n    CountryCode[\"An\"] = \"AN\";\n    /** Angola. */\n    CountryCode[\"Ao\"] = \"AO\";\n    /** Argentina. */\n    CountryCode[\"Ar\"] = \"AR\";\n    /** Austria. */\n    CountryCode[\"At\"] = \"AT\";\n    /** Australia. */\n    CountryCode[\"Au\"] = \"AU\";\n    /** Aruba. */\n    CountryCode[\"Aw\"] = \"AW\";\n    /** Åland Islands. */\n    CountryCode[\"Ax\"] = \"AX\";\n    /** Azerbaijan. */\n    CountryCode[\"Az\"] = \"AZ\";\n    /** Bosnia & Herzegovina. */\n    CountryCode[\"Ba\"] = \"BA\";\n    /** Barbados. */\n    CountryCode[\"Bb\"] = \"BB\";\n    /** Bangladesh. */\n    CountryCode[\"Bd\"] = \"BD\";\n    /** Belgium. */\n    CountryCode[\"Be\"] = \"BE\";\n    /** Burkina Faso. */\n    CountryCode[\"Bf\"] = \"BF\";\n    /** Bulgaria. */\n    CountryCode[\"Bg\"] = \"BG\";\n    /** Bahrain. */\n    CountryCode[\"Bh\"] = \"BH\";\n    /** Burundi. */\n    CountryCode[\"Bi\"] = \"BI\";\n    /** Benin. */\n    CountryCode[\"Bj\"] = \"BJ\";\n    /** St. Barthélemy. */\n    CountryCode[\"Bl\"] = \"BL\";\n    /** Bermuda. */\n    CountryCode[\"Bm\"] = \"BM\";\n    /** Brunei. */\n    CountryCode[\"Bn\"] = \"BN\";\n    /** Bolivia. */\n    CountryCode[\"Bo\"] = \"BO\";\n    /** Caribbean Netherlands. */\n    CountryCode[\"Bq\"] = \"BQ\";\n    /** Brazil. */\n    CountryCode[\"Br\"] = \"BR\";\n    /** Bahamas. */\n    CountryCode[\"Bs\"] = \"BS\";\n    /** Bhutan. */\n    CountryCode[\"Bt\"] = \"BT\";\n    /** Bouvet Island. */\n    CountryCode[\"Bv\"] = \"BV\";\n    /** Botswana. */\n    CountryCode[\"Bw\"] = \"BW\";\n    /** Belarus. */\n    CountryCode[\"By\"] = \"BY\";\n    /** Belize. */\n    CountryCode[\"Bz\"] = \"BZ\";\n    /** Canada. */\n    CountryCode[\"Ca\"] = \"CA\";\n    /** Cocos (Keeling) Islands. */\n    CountryCode[\"Cc\"] = \"CC\";\n    /** Congo - Kinshasa. */\n    CountryCode[\"Cd\"] = \"CD\";\n    /** Central African Republic. */\n    CountryCode[\"Cf\"] = \"CF\";\n    /** Congo - Brazzaville. */\n    CountryCode[\"Cg\"] = \"CG\";\n    /** Switzerland. */\n    CountryCode[\"Ch\"] = \"CH\";\n    /** Côte d’Ivoire. */\n    CountryCode[\"Ci\"] = \"CI\";\n    /** Cook Islands. */\n    CountryCode[\"Ck\"] = \"CK\";\n    /** Chile. */\n    CountryCode[\"Cl\"] = \"CL\";\n    /** Cameroon. */\n    CountryCode[\"Cm\"] = \"CM\";\n    /** China. */\n    CountryCode[\"Cn\"] = \"CN\";\n    /** Colombia. */\n    CountryCode[\"Co\"] = \"CO\";\n    /** Costa Rica. */\n    CountryCode[\"Cr\"] = \"CR\";\n    /** Cuba. */\n    CountryCode[\"Cu\"] = \"CU\";\n    /** Cape Verde. */\n    CountryCode[\"Cv\"] = \"CV\";\n    /** Curaçao. */\n    CountryCode[\"Cw\"] = \"CW\";\n    /** Christmas Island. */\n    CountryCode[\"Cx\"] = \"CX\";\n    /** Cyprus. */\n    CountryCode[\"Cy\"] = \"CY\";\n    /** Czechia. */\n    CountryCode[\"Cz\"] = \"CZ\";\n    /** Germany. */\n    CountryCode[\"De\"] = \"DE\";\n    /** Djibouti. */\n    CountryCode[\"Dj\"] = \"DJ\";\n    /** Denmark. */\n    CountryCode[\"Dk\"] = \"DK\";\n    /** Dominica. */\n    CountryCode[\"Dm\"] = \"DM\";\n    /** Dominican Republic. */\n    CountryCode[\"Do\"] = \"DO\";\n    /** Algeria. */\n    CountryCode[\"Dz\"] = \"DZ\";\n    /** Ecuador. */\n    CountryCode[\"Ec\"] = \"EC\";\n    /** Estonia. */\n    CountryCode[\"Ee\"] = \"EE\";\n    /** Egypt. */\n    CountryCode[\"Eg\"] = \"EG\";\n    /** Western Sahara. */\n    CountryCode[\"Eh\"] = \"EH\";\n    /** Eritrea. */\n    CountryCode[\"Er\"] = \"ER\";\n    /** Spain. */\n    CountryCode[\"Es\"] = \"ES\";\n    /** Ethiopia. */\n    CountryCode[\"Et\"] = \"ET\";\n    /** Finland. */\n    CountryCode[\"Fi\"] = \"FI\";\n    /** Fiji. */\n    CountryCode[\"Fj\"] = \"FJ\";\n    /** Falkland Islands. */\n    CountryCode[\"Fk\"] = \"FK\";\n    /** Faroe Islands. */\n    CountryCode[\"Fo\"] = \"FO\";\n    /** France. */\n    CountryCode[\"Fr\"] = \"FR\";\n    /** Gabon. */\n    CountryCode[\"Ga\"] = \"GA\";\n    /** United Kingdom. */\n    CountryCode[\"Gb\"] = \"GB\";\n    /** Grenada. */\n    CountryCode[\"Gd\"] = \"GD\";\n    /** Georgia. */\n    CountryCode[\"Ge\"] = \"GE\";\n    /** French Guiana. */\n    CountryCode[\"Gf\"] = \"GF\";\n    /** Guernsey. */\n    CountryCode[\"Gg\"] = \"GG\";\n    /** Ghana. */\n    CountryCode[\"Gh\"] = \"GH\";\n    /** Gibraltar. */\n    CountryCode[\"Gi\"] = \"GI\";\n    /** Greenland. */\n    CountryCode[\"Gl\"] = \"GL\";\n    /** Gambia. */\n    CountryCode[\"Gm\"] = \"GM\";\n    /** Guinea. */\n    CountryCode[\"Gn\"] = \"GN\";\n    /** Guadeloupe. */\n    CountryCode[\"Gp\"] = \"GP\";\n    /** Equatorial Guinea. */\n    CountryCode[\"Gq\"] = \"GQ\";\n    /** Greece. */\n    CountryCode[\"Gr\"] = \"GR\";\n    /** South Georgia & South Sandwich Islands. */\n    CountryCode[\"Gs\"] = \"GS\";\n    /** Guatemala. */\n    CountryCode[\"Gt\"] = \"GT\";\n    /** Guinea-Bissau. */\n    CountryCode[\"Gw\"] = \"GW\";\n    /** Guyana. */\n    CountryCode[\"Gy\"] = \"GY\";\n    /** Hong Kong SAR. */\n    CountryCode[\"Hk\"] = \"HK\";\n    /** Heard & McDonald Islands. */\n    CountryCode[\"Hm\"] = \"HM\";\n    /** Honduras. */\n    CountryCode[\"Hn\"] = \"HN\";\n    /** Croatia. */\n    CountryCode[\"Hr\"] = \"HR\";\n    /** Haiti. */\n    CountryCode[\"Ht\"] = \"HT\";\n    /** Hungary. */\n    CountryCode[\"Hu\"] = \"HU\";\n    /** Indonesia. */\n    CountryCode[\"Id\"] = \"ID\";\n    /** Ireland. */\n    CountryCode[\"Ie\"] = \"IE\";\n    /** Israel. */\n    CountryCode[\"Il\"] = \"IL\";\n    /** Isle of Man. */\n    CountryCode[\"Im\"] = \"IM\";\n    /** India. */\n    CountryCode[\"In\"] = \"IN\";\n    /** British Indian Ocean Territory. */\n    CountryCode[\"Io\"] = \"IO\";\n    /** Iraq. */\n    CountryCode[\"Iq\"] = \"IQ\";\n    /** Iran. */\n    CountryCode[\"Ir\"] = \"IR\";\n    /** Iceland. */\n    CountryCode[\"Is\"] = \"IS\";\n    /** Italy. */\n    CountryCode[\"It\"] = \"IT\";\n    /** Jersey. */\n    CountryCode[\"Je\"] = \"JE\";\n    /** Jamaica. */\n    CountryCode[\"Jm\"] = \"JM\";\n    /** Jordan. */\n    CountryCode[\"Jo\"] = \"JO\";\n    /** Japan. */\n    CountryCode[\"Jp\"] = \"JP\";\n    /** Kenya. */\n    CountryCode[\"Ke\"] = \"KE\";\n    /** Kyrgyzstan. */\n    CountryCode[\"Kg\"] = \"KG\";\n    /** Cambodia. */\n    CountryCode[\"Kh\"] = \"KH\";\n    /** Kiribati. */\n    CountryCode[\"Ki\"] = \"KI\";\n    /** Comoros. */\n    CountryCode[\"Km\"] = \"KM\";\n    /** St. Kitts & Nevis. */\n    CountryCode[\"Kn\"] = \"KN\";\n    /** North Korea. */\n    CountryCode[\"Kp\"] = \"KP\";\n    /** South Korea. */\n    CountryCode[\"Kr\"] = \"KR\";\n    /** Kuwait. */\n    CountryCode[\"Kw\"] = \"KW\";\n    /** Cayman Islands. */\n    CountryCode[\"Ky\"] = \"KY\";\n    /** Kazakhstan. */\n    CountryCode[\"Kz\"] = \"KZ\";\n    /** Laos. */\n    CountryCode[\"La\"] = \"LA\";\n    /** Lebanon. */\n    CountryCode[\"Lb\"] = \"LB\";\n    /** St. Lucia. */\n    CountryCode[\"Lc\"] = \"LC\";\n    /** Liechtenstein. */\n    CountryCode[\"Li\"] = \"LI\";\n    /** Sri Lanka. */\n    CountryCode[\"Lk\"] = \"LK\";\n    /** Liberia. */\n    CountryCode[\"Lr\"] = \"LR\";\n    /** Lesotho. */\n    CountryCode[\"Ls\"] = \"LS\";\n    /** Lithuania. */\n    CountryCode[\"Lt\"] = \"LT\";\n    /** Luxembourg. */\n    CountryCode[\"Lu\"] = \"LU\";\n    /** Latvia. */\n    CountryCode[\"Lv\"] = \"LV\";\n    /** Libya. */\n    CountryCode[\"Ly\"] = \"LY\";\n    /** Morocco. */\n    CountryCode[\"Ma\"] = \"MA\";\n    /** Monaco. */\n    CountryCode[\"Mc\"] = \"MC\";\n    /** Moldova. */\n    CountryCode[\"Md\"] = \"MD\";\n    /** Montenegro. */\n    CountryCode[\"Me\"] = \"ME\";\n    /** St. Martin. */\n    CountryCode[\"Mf\"] = \"MF\";\n    /** Madagascar. */\n    CountryCode[\"Mg\"] = \"MG\";\n    /** North Macedonia. */\n    CountryCode[\"Mk\"] = \"MK\";\n    /** Mali. */\n    CountryCode[\"Ml\"] = \"ML\";\n    /** Myanmar (Burma). */\n    CountryCode[\"Mm\"] = \"MM\";\n    /** Mongolia. */\n    CountryCode[\"Mn\"] = \"MN\";\n    /** Macao SAR. */\n    CountryCode[\"Mo\"] = \"MO\";\n    /** Martinique. */\n    CountryCode[\"Mq\"] = \"MQ\";\n    /** Mauritania. */\n    CountryCode[\"Mr\"] = \"MR\";\n    /** Montserrat. */\n    CountryCode[\"Ms\"] = \"MS\";\n    /** Malta. */\n    CountryCode[\"Mt\"] = \"MT\";\n    /** Mauritius. */\n    CountryCode[\"Mu\"] = \"MU\";\n    /** Maldives. */\n    CountryCode[\"Mv\"] = \"MV\";\n    /** Malawi. */\n    CountryCode[\"Mw\"] = \"MW\";\n    /** Mexico. */\n    CountryCode[\"Mx\"] = \"MX\";\n    /** Malaysia. */\n    CountryCode[\"My\"] = \"MY\";\n    /** Mozambique. */\n    CountryCode[\"Mz\"] = \"MZ\";\n    /** Namibia. */\n    CountryCode[\"Na\"] = \"NA\";\n    /** New Caledonia. */\n    CountryCode[\"Nc\"] = \"NC\";\n    /** Niger. */\n    CountryCode[\"Ne\"] = \"NE\";\n    /** Norfolk Island. */\n    CountryCode[\"Nf\"] = \"NF\";\n    /** Nigeria. */\n    CountryCode[\"Ng\"] = \"NG\";\n    /** Nicaragua. */\n    CountryCode[\"Ni\"] = \"NI\";\n    /** Netherlands. */\n    CountryCode[\"Nl\"] = \"NL\";\n    /** Norway. */\n    CountryCode[\"No\"] = \"NO\";\n    /** Nepal. */\n    CountryCode[\"Np\"] = \"NP\";\n    /** Nauru. */\n    CountryCode[\"Nr\"] = \"NR\";\n    /** Niue. */\n    CountryCode[\"Nu\"] = \"NU\";\n    /** New Zealand. */\n    CountryCode[\"Nz\"] = \"NZ\";\n    /** Oman. */\n    CountryCode[\"Om\"] = \"OM\";\n    /** Panama. */\n    CountryCode[\"Pa\"] = \"PA\";\n    /** Peru. */\n    CountryCode[\"Pe\"] = \"PE\";\n    /** French Polynesia. */\n    CountryCode[\"Pf\"] = \"PF\";\n    /** Papua New Guinea. */\n    CountryCode[\"Pg\"] = \"PG\";\n    /** Philippines. */\n    CountryCode[\"Ph\"] = \"PH\";\n    /** Pakistan. */\n    CountryCode[\"Pk\"] = \"PK\";\n    /** Poland. */\n    CountryCode[\"Pl\"] = \"PL\";\n    /** St. Pierre & Miquelon. */\n    CountryCode[\"Pm\"] = \"PM\";\n    /** Pitcairn Islands. */\n    CountryCode[\"Pn\"] = \"PN\";\n    /** Palestinian Territories. */\n    CountryCode[\"Ps\"] = \"PS\";\n    /** Portugal. */\n    CountryCode[\"Pt\"] = \"PT\";\n    /** Paraguay. */\n    CountryCode[\"Py\"] = \"PY\";\n    /** Qatar. */\n    CountryCode[\"Qa\"] = \"QA\";\n    /** Réunion. */\n    CountryCode[\"Re\"] = \"RE\";\n    /** Romania. */\n    CountryCode[\"Ro\"] = \"RO\";\n    /** Serbia. */\n    CountryCode[\"Rs\"] = \"RS\";\n    /** Russia. */\n    CountryCode[\"Ru\"] = \"RU\";\n    /** Rwanda. */\n    CountryCode[\"Rw\"] = \"RW\";\n    /** Saudi Arabia. */\n    CountryCode[\"Sa\"] = \"SA\";\n    /** Solomon Islands. */\n    CountryCode[\"Sb\"] = \"SB\";\n    /** Seychelles. */\n    CountryCode[\"Sc\"] = \"SC\";\n    /** Sudan. */\n    CountryCode[\"Sd\"] = \"SD\";\n    /** Sweden. */\n    CountryCode[\"Se\"] = \"SE\";\n    /** Singapore. */\n    CountryCode[\"Sg\"] = \"SG\";\n    /** St. Helena. */\n    CountryCode[\"Sh\"] = \"SH\";\n    /** Slovenia. */\n    CountryCode[\"Si\"] = \"SI\";\n    /** Svalbard & Jan Mayen. */\n    CountryCode[\"Sj\"] = \"SJ\";\n    /** Slovakia. */\n    CountryCode[\"Sk\"] = \"SK\";\n    /** Sierra Leone. */\n    CountryCode[\"Sl\"] = \"SL\";\n    /** San Marino. */\n    CountryCode[\"Sm\"] = \"SM\";\n    /** Senegal. */\n    CountryCode[\"Sn\"] = \"SN\";\n    /** Somalia. */\n    CountryCode[\"So\"] = \"SO\";\n    /** Suriname. */\n    CountryCode[\"Sr\"] = \"SR\";\n    /** South Sudan. */\n    CountryCode[\"Ss\"] = \"SS\";\n    /** São Tomé & Príncipe. */\n    CountryCode[\"St\"] = \"ST\";\n    /** El Salvador. */\n    CountryCode[\"Sv\"] = \"SV\";\n    /** Sint Maarten. */\n    CountryCode[\"Sx\"] = \"SX\";\n    /** Syria. */\n    CountryCode[\"Sy\"] = \"SY\";\n    /** Eswatini. */\n    CountryCode[\"Sz\"] = \"SZ\";\n    /** Tristan da Cunha. */\n    CountryCode[\"Ta\"] = \"TA\";\n    /** Turks & Caicos Islands. */\n    CountryCode[\"Tc\"] = \"TC\";\n    /** Chad. */\n    CountryCode[\"Td\"] = \"TD\";\n    /** French Southern Territories. */\n    CountryCode[\"Tf\"] = \"TF\";\n    /** Togo. */\n    CountryCode[\"Tg\"] = \"TG\";\n    /** Thailand. */\n    CountryCode[\"Th\"] = \"TH\";\n    /** Tajikistan. */\n    CountryCode[\"Tj\"] = \"TJ\";\n    /** Tokelau. */\n    CountryCode[\"Tk\"] = \"TK\";\n    /** Timor-Leste. */\n    CountryCode[\"Tl\"] = \"TL\";\n    /** Turkmenistan. */\n    CountryCode[\"Tm\"] = \"TM\";\n    /** Tunisia. */\n    CountryCode[\"Tn\"] = \"TN\";\n    /** Tonga. */\n    CountryCode[\"To\"] = \"TO\";\n    /** Turkey. */\n    CountryCode[\"Tr\"] = \"TR\";\n    /** Trinidad & Tobago. */\n    CountryCode[\"Tt\"] = \"TT\";\n    /** Tuvalu. */\n    CountryCode[\"Tv\"] = \"TV\";\n    /** Taiwan. */\n    CountryCode[\"Tw\"] = \"TW\";\n    /** Tanzania. */\n    CountryCode[\"Tz\"] = \"TZ\";\n    /** Ukraine. */\n    CountryCode[\"Ua\"] = \"UA\";\n    /** Uganda. */\n    CountryCode[\"Ug\"] = \"UG\";\n    /** U.S. Outlying Islands. */\n    CountryCode[\"Um\"] = \"UM\";\n    /** United States. */\n    CountryCode[\"Us\"] = \"US\";\n    /** Uruguay. */\n    CountryCode[\"Uy\"] = \"UY\";\n    /** Uzbekistan. */\n    CountryCode[\"Uz\"] = \"UZ\";\n    /** Vatican City. */\n    CountryCode[\"Va\"] = \"VA\";\n    /** St. Vincent & Grenadines. */\n    CountryCode[\"Vc\"] = \"VC\";\n    /** Venezuela. */\n    CountryCode[\"Ve\"] = \"VE\";\n    /** British Virgin Islands. */\n    CountryCode[\"Vg\"] = \"VG\";\n    /** Vietnam. */\n    CountryCode[\"Vn\"] = \"VN\";\n    /** Vanuatu. */\n    CountryCode[\"Vu\"] = \"VU\";\n    /** Wallis & Futuna. */\n    CountryCode[\"Wf\"] = \"WF\";\n    /** Samoa. */\n    CountryCode[\"Ws\"] = \"WS\";\n    /** Kosovo. */\n    CountryCode[\"Xk\"] = \"XK\";\n    /** Yemen. */\n    CountryCode[\"Ye\"] = \"YE\";\n    /** Mayotte. */\n    CountryCode[\"Yt\"] = \"YT\";\n    /** South Africa. */\n    CountryCode[\"Za\"] = \"ZA\";\n    /** Zambia. */\n    CountryCode[\"Zm\"] = \"ZM\";\n    /** Zimbabwe. */\n    CountryCode[\"Zw\"] = \"ZW\";\n    /** Unknown Region. */\n    CountryCode[\"Zz\"] = \"ZZ\";\n})(CountryCode || (CountryCode = {}));\n/** The part of the image that should remain after cropping. */\nexport var CropRegion;\n(function (CropRegion) {\n    /** Keep the bottom of the image. */\n    CropRegion[\"Bottom\"] = \"BOTTOM\";\n    /** Keep the center of the image. */\n    CropRegion[\"Center\"] = \"CENTER\";\n    /** Keep the left of the image. */\n    CropRegion[\"Left\"] = \"LEFT\";\n    /** Keep the right of the image. */\n    CropRegion[\"Right\"] = \"RIGHT\";\n    /** Keep the top of the image. */\n    CropRegion[\"Top\"] = \"TOP\";\n})(CropRegion || (CropRegion = {}));\n/**\n * The three-letter currency codes that represent the world currencies used in stores. These include standard ISO 4217 codes, legacy codes,\n * and non-standard codes.\n *\n */\nexport var CurrencyCode;\n(function (CurrencyCode) {\n    /** United Arab Emirates Dirham (AED). */\n    CurrencyCode[\"Aed\"] = \"AED\";\n    /** Afghan Afghani (AFN). */\n    CurrencyCode[\"Afn\"] = \"AFN\";\n    /** Albanian Lek (ALL). */\n    CurrencyCode[\"All\"] = \"ALL\";\n    /** Armenian Dram (AMD). */\n    CurrencyCode[\"Amd\"] = \"AMD\";\n    /** Netherlands Antillean Guilder. */\n    CurrencyCode[\"Ang\"] = \"ANG\";\n    /** Angolan Kwanza (AOA). */\n    CurrencyCode[\"Aoa\"] = \"AOA\";\n    /** Argentine Pesos (ARS). */\n    CurrencyCode[\"Ars\"] = \"ARS\";\n    /** Australian Dollars (AUD). */\n    CurrencyCode[\"Aud\"] = \"AUD\";\n    /** Aruban Florin (AWG). */\n    CurrencyCode[\"Awg\"] = \"AWG\";\n    /** Azerbaijani Manat (AZN). */\n    CurrencyCode[\"Azn\"] = \"AZN\";\n    /** Bosnia and Herzegovina Convertible Mark (BAM). */\n    CurrencyCode[\"Bam\"] = \"BAM\";\n    /** Barbadian Dollar (BBD). */\n    CurrencyCode[\"Bbd\"] = \"BBD\";\n    /** Bangladesh Taka (BDT). */\n    CurrencyCode[\"Bdt\"] = \"BDT\";\n    /** Bulgarian Lev (BGN). */\n    CurrencyCode[\"Bgn\"] = \"BGN\";\n    /** Bahraini Dinar (BHD). */\n    CurrencyCode[\"Bhd\"] = \"BHD\";\n    /** Burundian Franc (BIF). */\n    CurrencyCode[\"Bif\"] = \"BIF\";\n    /** Bermudian Dollar (BMD). */\n    CurrencyCode[\"Bmd\"] = \"BMD\";\n    /** Brunei Dollar (BND). */\n    CurrencyCode[\"Bnd\"] = \"BND\";\n    /** Bolivian Boliviano (BOB). */\n    CurrencyCode[\"Bob\"] = \"BOB\";\n    /** Brazilian Real (BRL). */\n    CurrencyCode[\"Brl\"] = \"BRL\";\n    /** Bahamian Dollar (BSD). */\n    CurrencyCode[\"Bsd\"] = \"BSD\";\n    /** Bhutanese Ngultrum (BTN). */\n    CurrencyCode[\"Btn\"] = \"BTN\";\n    /** Botswana Pula (BWP). */\n    CurrencyCode[\"Bwp\"] = \"BWP\";\n    /** Belarusian Ruble (BYN). */\n    CurrencyCode[\"Byn\"] = \"BYN\";\n    /** Belarusian Ruble (BYR). */\n    CurrencyCode[\"Byr\"] = \"BYR\";\n    /** Belize Dollar (BZD). */\n    CurrencyCode[\"Bzd\"] = \"BZD\";\n    /** Canadian Dollars (CAD). */\n    CurrencyCode[\"Cad\"] = \"CAD\";\n    /** Congolese franc (CDF). */\n    CurrencyCode[\"Cdf\"] = \"CDF\";\n    /** Swiss Francs (CHF). */\n    CurrencyCode[\"Chf\"] = \"CHF\";\n    /** Chilean Peso (CLP). */\n    CurrencyCode[\"Clp\"] = \"CLP\";\n    /** Chinese Yuan Renminbi (CNY). */\n    CurrencyCode[\"Cny\"] = \"CNY\";\n    /** Colombian Peso (COP). */\n    CurrencyCode[\"Cop\"] = \"COP\";\n    /** Costa Rican Colones (CRC). */\n    CurrencyCode[\"Crc\"] = \"CRC\";\n    /** Cape Verdean escudo (CVE). */\n    CurrencyCode[\"Cve\"] = \"CVE\";\n    /** Czech Koruny (CZK). */\n    CurrencyCode[\"Czk\"] = \"CZK\";\n    /** Djiboutian Franc (DJF). */\n    CurrencyCode[\"Djf\"] = \"DJF\";\n    /** Danish Kroner (DKK). */\n    CurrencyCode[\"Dkk\"] = \"DKK\";\n    /** Dominican Peso (DOP). */\n    CurrencyCode[\"Dop\"] = \"DOP\";\n    /** Algerian Dinar (DZD). */\n    CurrencyCode[\"Dzd\"] = \"DZD\";\n    /** Egyptian Pound (EGP). */\n    CurrencyCode[\"Egp\"] = \"EGP\";\n    /** Eritrean Nakfa (ERN). */\n    CurrencyCode[\"Ern\"] = \"ERN\";\n    /** Ethiopian Birr (ETB). */\n    CurrencyCode[\"Etb\"] = \"ETB\";\n    /** Euro (EUR). */\n    CurrencyCode[\"Eur\"] = \"EUR\";\n    /** Fijian Dollars (FJD). */\n    CurrencyCode[\"Fjd\"] = \"FJD\";\n    /** Falkland Islands Pounds (FKP). */\n    CurrencyCode[\"Fkp\"] = \"FKP\";\n    /** United Kingdom Pounds (GBP). */\n    CurrencyCode[\"Gbp\"] = \"GBP\";\n    /** Georgian Lari (GEL). */\n    CurrencyCode[\"Gel\"] = \"GEL\";\n    /** Ghanaian Cedi (GHS). */\n    CurrencyCode[\"Ghs\"] = \"GHS\";\n    /** Gibraltar Pounds (GIP). */\n    CurrencyCode[\"Gip\"] = \"GIP\";\n    /** Gambian Dalasi (GMD). */\n    CurrencyCode[\"Gmd\"] = \"GMD\";\n    /** Guinean Franc (GNF). */\n    CurrencyCode[\"Gnf\"] = \"GNF\";\n    /** Guatemalan Quetzal (GTQ). */\n    CurrencyCode[\"Gtq\"] = \"GTQ\";\n    /** Guyanese Dollar (GYD). */\n    CurrencyCode[\"Gyd\"] = \"GYD\";\n    /** Hong Kong Dollars (HKD). */\n    CurrencyCode[\"Hkd\"] = \"HKD\";\n    /** Honduran Lempira (HNL). */\n    CurrencyCode[\"Hnl\"] = \"HNL\";\n    /** Croatian Kuna (HRK). */\n    CurrencyCode[\"Hrk\"] = \"HRK\";\n    /** Haitian Gourde (HTG). */\n    CurrencyCode[\"Htg\"] = \"HTG\";\n    /** Hungarian Forint (HUF). */\n    CurrencyCode[\"Huf\"] = \"HUF\";\n    /** Indonesian Rupiah (IDR). */\n    CurrencyCode[\"Idr\"] = \"IDR\";\n    /** Israeli New Shekel (NIS). */\n    CurrencyCode[\"Ils\"] = \"ILS\";\n    /** Indian Rupees (INR). */\n    CurrencyCode[\"Inr\"] = \"INR\";\n    /** Iraqi Dinar (IQD). */\n    CurrencyCode[\"Iqd\"] = \"IQD\";\n    /** Iranian Rial (IRR). */\n    CurrencyCode[\"Irr\"] = \"IRR\";\n    /** Icelandic Kronur (ISK). */\n    CurrencyCode[\"Isk\"] = \"ISK\";\n    /** Jersey Pound. */\n    CurrencyCode[\"Jep\"] = \"JEP\";\n    /** Jamaican Dollars (JMD). */\n    CurrencyCode[\"Jmd\"] = \"JMD\";\n    /** Jordanian Dinar (JOD). */\n    CurrencyCode[\"Jod\"] = \"JOD\";\n    /** Japanese Yen (JPY). */\n    CurrencyCode[\"Jpy\"] = \"JPY\";\n    /** Kenyan Shilling (KES). */\n    CurrencyCode[\"Kes\"] = \"KES\";\n    /** Kyrgyzstani Som (KGS). */\n    CurrencyCode[\"Kgs\"] = \"KGS\";\n    /** Cambodian Riel. */\n    CurrencyCode[\"Khr\"] = \"KHR\";\n    /** Kiribati Dollar (KID). */\n    CurrencyCode[\"Kid\"] = \"KID\";\n    /** Comorian Franc (KMF). */\n    CurrencyCode[\"Kmf\"] = \"KMF\";\n    /** South Korean Won (KRW). */\n    CurrencyCode[\"Krw\"] = \"KRW\";\n    /** Kuwaiti Dinar (KWD). */\n    CurrencyCode[\"Kwd\"] = \"KWD\";\n    /** Cayman Dollars (KYD). */\n    CurrencyCode[\"Kyd\"] = \"KYD\";\n    /** Kazakhstani Tenge (KZT). */\n    CurrencyCode[\"Kzt\"] = \"KZT\";\n    /** Laotian Kip (LAK). */\n    CurrencyCode[\"Lak\"] = \"LAK\";\n    /** Lebanese Pounds (LBP). */\n    CurrencyCode[\"Lbp\"] = \"LBP\";\n    /** Sri Lankan Rupees (LKR). */\n    CurrencyCode[\"Lkr\"] = \"LKR\";\n    /** Liberian Dollar (LRD). */\n    CurrencyCode[\"Lrd\"] = \"LRD\";\n    /** Lesotho Loti (LSL). */\n    CurrencyCode[\"Lsl\"] = \"LSL\";\n    /** Lithuanian Litai (LTL). */\n    CurrencyCode[\"Ltl\"] = \"LTL\";\n    /** Latvian Lati (LVL). */\n    CurrencyCode[\"Lvl\"] = \"LVL\";\n    /** Libyan Dinar (LYD). */\n    CurrencyCode[\"Lyd\"] = \"LYD\";\n    /** Moroccan Dirham. */\n    CurrencyCode[\"Mad\"] = \"MAD\";\n    /** Moldovan Leu (MDL). */\n    CurrencyCode[\"Mdl\"] = \"MDL\";\n    /** Malagasy Ariary (MGA). */\n    CurrencyCode[\"Mga\"] = \"MGA\";\n    /** Macedonia Denar (MKD). */\n    CurrencyCode[\"Mkd\"] = \"MKD\";\n    /** Burmese Kyat (MMK). */\n    CurrencyCode[\"Mmk\"] = \"MMK\";\n    /** Mongolian Tugrik. */\n    CurrencyCode[\"Mnt\"] = \"MNT\";\n    /** Macanese Pataca (MOP). */\n    CurrencyCode[\"Mop\"] = \"MOP\";\n    /** Mauritanian Ouguiya (MRU). */\n    CurrencyCode[\"Mru\"] = \"MRU\";\n    /** Mauritian Rupee (MUR). */\n    CurrencyCode[\"Mur\"] = \"MUR\";\n    /** Maldivian Rufiyaa (MVR). */\n    CurrencyCode[\"Mvr\"] = \"MVR\";\n    /** Malawian Kwacha (MWK). */\n    CurrencyCode[\"Mwk\"] = \"MWK\";\n    /** Mexican Pesos (MXN). */\n    CurrencyCode[\"Mxn\"] = \"MXN\";\n    /** Malaysian Ringgits (MYR). */\n    CurrencyCode[\"Myr\"] = \"MYR\";\n    /** Mozambican Metical. */\n    CurrencyCode[\"Mzn\"] = \"MZN\";\n    /** Namibian Dollar. */\n    CurrencyCode[\"Nad\"] = \"NAD\";\n    /** Nigerian Naira (NGN). */\n    CurrencyCode[\"Ngn\"] = \"NGN\";\n    /** Nicaraguan Córdoba (NIO). */\n    CurrencyCode[\"Nio\"] = \"NIO\";\n    /** Norwegian Kroner (NOK). */\n    CurrencyCode[\"Nok\"] = \"NOK\";\n    /** Nepalese Rupee (NPR). */\n    CurrencyCode[\"Npr\"] = \"NPR\";\n    /** New Zealand Dollars (NZD). */\n    CurrencyCode[\"Nzd\"] = \"NZD\";\n    /** Omani Rial (OMR). */\n    CurrencyCode[\"Omr\"] = \"OMR\";\n    /** Panamian Balboa (PAB). */\n    CurrencyCode[\"Pab\"] = \"PAB\";\n    /** Peruvian Nuevo Sol (PEN). */\n    CurrencyCode[\"Pen\"] = \"PEN\";\n    /** Papua New Guinean Kina (PGK). */\n    CurrencyCode[\"Pgk\"] = \"PGK\";\n    /** Philippine Peso (PHP). */\n    CurrencyCode[\"Php\"] = \"PHP\";\n    /** Pakistani Rupee (PKR). */\n    CurrencyCode[\"Pkr\"] = \"PKR\";\n    /** Polish Zlotych (PLN). */\n    CurrencyCode[\"Pln\"] = \"PLN\";\n    /** Paraguayan Guarani (PYG). */\n    CurrencyCode[\"Pyg\"] = \"PYG\";\n    /** Qatari Rial (QAR). */\n    CurrencyCode[\"Qar\"] = \"QAR\";\n    /** Romanian Lei (RON). */\n    CurrencyCode[\"Ron\"] = \"RON\";\n    /** Serbian dinar (RSD). */\n    CurrencyCode[\"Rsd\"] = \"RSD\";\n    /** Russian Rubles (RUB). */\n    CurrencyCode[\"Rub\"] = \"RUB\";\n    /** Rwandan Franc (RWF). */\n    CurrencyCode[\"Rwf\"] = \"RWF\";\n    /** Saudi Riyal (SAR). */\n    CurrencyCode[\"Sar\"] = \"SAR\";\n    /** Solomon Islands Dollar (SBD). */\n    CurrencyCode[\"Sbd\"] = \"SBD\";\n    /** Seychellois Rupee (SCR). */\n    CurrencyCode[\"Scr\"] = \"SCR\";\n    /** Sudanese Pound (SDG). */\n    CurrencyCode[\"Sdg\"] = \"SDG\";\n    /** Swedish Kronor (SEK). */\n    CurrencyCode[\"Sek\"] = \"SEK\";\n    /** Singapore Dollars (SGD). */\n    CurrencyCode[\"Sgd\"] = \"SGD\";\n    /** Saint Helena Pounds (SHP). */\n    CurrencyCode[\"Shp\"] = \"SHP\";\n    /** Sierra Leonean Leone (SLL). */\n    CurrencyCode[\"Sll\"] = \"SLL\";\n    /** Somali Shilling (SOS). */\n    CurrencyCode[\"Sos\"] = \"SOS\";\n    /** Surinamese Dollar (SRD). */\n    CurrencyCode[\"Srd\"] = \"SRD\";\n    /** South Sudanese Pound (SSP). */\n    CurrencyCode[\"Ssp\"] = \"SSP\";\n    /** Sao Tome And Principe Dobra (STD). */\n    CurrencyCode[\"Std\"] = \"STD\";\n    /** Sao Tome And Principe Dobra (STN). */\n    CurrencyCode[\"Stn\"] = \"STN\";\n    /** Syrian Pound (SYP). */\n    CurrencyCode[\"Syp\"] = \"SYP\";\n    /** Swazi Lilangeni (SZL). */\n    CurrencyCode[\"Szl\"] = \"SZL\";\n    /** Thai baht (THB). */\n    CurrencyCode[\"Thb\"] = \"THB\";\n    /** Tajikistani Somoni (TJS). */\n    CurrencyCode[\"Tjs\"] = \"TJS\";\n    /** Turkmenistani Manat (TMT). */\n    CurrencyCode[\"Tmt\"] = \"TMT\";\n    /** Tunisian Dinar (TND). */\n    CurrencyCode[\"Tnd\"] = \"TND\";\n    /** Tongan Pa'anga (TOP). */\n    CurrencyCode[\"Top\"] = \"TOP\";\n    /** Turkish Lira (TRY). */\n    CurrencyCode[\"Try\"] = \"TRY\";\n    /** Trinidad and Tobago Dollars (TTD). */\n    CurrencyCode[\"Ttd\"] = \"TTD\";\n    /** Taiwan Dollars (TWD). */\n    CurrencyCode[\"Twd\"] = \"TWD\";\n    /** Tanzanian Shilling (TZS). */\n    CurrencyCode[\"Tzs\"] = \"TZS\";\n    /** Ukrainian Hryvnia (UAH). */\n    CurrencyCode[\"Uah\"] = \"UAH\";\n    /** Ugandan Shilling (UGX). */\n    CurrencyCode[\"Ugx\"] = \"UGX\";\n    /** United States Dollars (USD). */\n    CurrencyCode[\"Usd\"] = \"USD\";\n    /** Uruguayan Pesos (UYU). */\n    CurrencyCode[\"Uyu\"] = \"UYU\";\n    /** Uzbekistan som (UZS). */\n    CurrencyCode[\"Uzs\"] = \"UZS\";\n    /** Venezuelan Bolivares (VED). */\n    CurrencyCode[\"Ved\"] = \"VED\";\n    /** Venezuelan Bolivares (VEF). */\n    CurrencyCode[\"Vef\"] = \"VEF\";\n    /** Venezuelan Bolivares (VES). */\n    CurrencyCode[\"Ves\"] = \"VES\";\n    /** Vietnamese đồng (VND). */\n    CurrencyCode[\"Vnd\"] = \"VND\";\n    /** Vanuatu Vatu (VUV). */\n    CurrencyCode[\"Vuv\"] = \"VUV\";\n    /** Samoan Tala (WST). */\n    CurrencyCode[\"Wst\"] = \"WST\";\n    /** Central African CFA Franc (XAF). */\n    CurrencyCode[\"Xaf\"] = \"XAF\";\n    /** East Caribbean Dollar (XCD). */\n    CurrencyCode[\"Xcd\"] = \"XCD\";\n    /** West African CFA franc (XOF). */\n    CurrencyCode[\"Xof\"] = \"XOF\";\n    /** CFP Franc (XPF). */\n    CurrencyCode[\"Xpf\"] = \"XPF\";\n    /** Unrecognized currency. */\n    CurrencyCode[\"Xxx\"] = \"XXX\";\n    /** Yemeni Rial (YER). */\n    CurrencyCode[\"Yer\"] = \"YER\";\n    /** South African Rand (ZAR). */\n    CurrencyCode[\"Zar\"] = \"ZAR\";\n    /** Zambian Kwacha (ZMW). */\n    CurrencyCode[\"Zmw\"] = \"ZMW\";\n})(CurrencyCode || (CurrencyCode = {}));\n/** Possible error codes that can be returned by `CustomerUserError`. */\nexport var CustomerErrorCode;\n(function (CustomerErrorCode) {\n    /** Customer already enabled. */\n    CustomerErrorCode[\"AlreadyEnabled\"] = \"ALREADY_ENABLED\";\n    /** Input email contains an invalid domain name. */\n    CustomerErrorCode[\"BadDomain\"] = \"BAD_DOMAIN\";\n    /** The input value is blank. */\n    CustomerErrorCode[\"Blank\"] = \"BLANK\";\n    /** Input contains HTML tags. */\n    CustomerErrorCode[\"ContainsHtmlTags\"] = \"CONTAINS_HTML_TAGS\";\n    /** Input contains URL. */\n    CustomerErrorCode[\"ContainsUrl\"] = \"CONTAINS_URL\";\n    /** Customer is disabled. */\n    CustomerErrorCode[\"CustomerDisabled\"] = \"CUSTOMER_DISABLED\";\n    /** The input value is invalid. */\n    CustomerErrorCode[\"Invalid\"] = \"INVALID\";\n    /** Multipass token is not valid. */\n    CustomerErrorCode[\"InvalidMultipassRequest\"] = \"INVALID_MULTIPASS_REQUEST\";\n    /** Address does not exist. */\n    CustomerErrorCode[\"NotFound\"] = \"NOT_FOUND\";\n    /** Input password starts or ends with whitespace. */\n    CustomerErrorCode[\"PasswordStartsOrEndsWithWhitespace\"] = \"PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE\";\n    /** The input value is already taken. */\n    CustomerErrorCode[\"Taken\"] = \"TAKEN\";\n    /** Invalid activation token. */\n    CustomerErrorCode[\"TokenInvalid\"] = \"TOKEN_INVALID\";\n    /** The input value is too long. */\n    CustomerErrorCode[\"TooLong\"] = \"TOO_LONG\";\n    /** The input value is too short. */\n    CustomerErrorCode[\"TooShort\"] = \"TOO_SHORT\";\n    /** Unidentified customer. */\n    CustomerErrorCode[\"UnidentifiedCustomer\"] = \"UNIDENTIFIED_CUSTOMER\";\n})(CustomerErrorCode || (CustomerErrorCode = {}));\n/** List of different delivery method types. */\nexport var DeliveryMethodType;\n(function (DeliveryMethodType) {\n    /** Local Delivery. */\n    DeliveryMethodType[\"Local\"] = \"LOCAL\";\n    /** None. */\n    DeliveryMethodType[\"None\"] = \"NONE\";\n    /** Shipping to a Pickup Point. */\n    DeliveryMethodType[\"PickupPoint\"] = \"PICKUP_POINT\";\n    /** Local Pickup. */\n    DeliveryMethodType[\"PickUp\"] = \"PICK_UP\";\n    /** Retail. */\n    DeliveryMethodType[\"Retail\"] = \"RETAIL\";\n    /** Shipping. */\n    DeliveryMethodType[\"Shipping\"] = \"SHIPPING\";\n})(DeliveryMethodType || (DeliveryMethodType = {}));\n/** Digital wallet, such as Apple Pay, which can be used for accelerated checkouts. */\nexport var DigitalWallet;\n(function (DigitalWallet) {\n    /** Android Pay. */\n    DigitalWallet[\"AndroidPay\"] = \"ANDROID_PAY\";\n    /** Apple Pay. */\n    DigitalWallet[\"ApplePay\"] = \"APPLE_PAY\";\n    /** Google Pay. */\n    DigitalWallet[\"GooglePay\"] = \"GOOGLE_PAY\";\n    /** Shopify Pay. */\n    DigitalWallet[\"ShopifyPay\"] = \"SHOPIFY_PAY\";\n})(DigitalWallet || (DigitalWallet = {}));\n/** The method by which the discount's value is allocated onto its entitled lines. */\nexport var DiscountApplicationAllocationMethod;\n(function (DiscountApplicationAllocationMethod) {\n    /** The value is spread across all entitled lines. */\n    DiscountApplicationAllocationMethod[\"Across\"] = \"ACROSS\";\n    /** The value is applied onto every entitled line. */\n    DiscountApplicationAllocationMethod[\"Each\"] = \"EACH\";\n    /** The value is specifically applied onto a particular line. */\n    DiscountApplicationAllocationMethod[\"One\"] = \"ONE\";\n})(DiscountApplicationAllocationMethod || (DiscountApplicationAllocationMethod = {}));\n/**\n * The lines on the order to which the discount is applied, of the type defined by\n * the discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of\n * `LINE_ITEM`, applies the discount on all line items that are entitled to the discount.\n * The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.\n *\n */\nexport var DiscountApplicationTargetSelection;\n(function (DiscountApplicationTargetSelection) {\n    /** The discount is allocated onto all the lines. */\n    DiscountApplicationTargetSelection[\"All\"] = \"ALL\";\n    /** The discount is allocated onto only the lines that it's entitled for. */\n    DiscountApplicationTargetSelection[\"Entitled\"] = \"ENTITLED\";\n    /** The discount is allocated onto explicitly chosen lines. */\n    DiscountApplicationTargetSelection[\"Explicit\"] = \"EXPLICIT\";\n})(DiscountApplicationTargetSelection || (DiscountApplicationTargetSelection = {}));\n/**\n * The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.\n *\n */\nexport var DiscountApplicationTargetType;\n(function (DiscountApplicationTargetType) {\n    /** The discount applies onto line items. */\n    DiscountApplicationTargetType[\"LineItem\"] = \"LINE_ITEM\";\n    /** The discount applies onto shipping lines. */\n    DiscountApplicationTargetType[\"ShippingLine\"] = \"SHIPPING_LINE\";\n})(DiscountApplicationTargetType || (DiscountApplicationTargetType = {}));\n/**\n * The type of data that the filter group represents.\n *\n * For more information, refer to [Filter products in a collection with the Storefront API]\n * (https://shopify.dev/api/examples/filter-products).\n *\n */\nexport var FilterType;\n(function (FilterType) {\n    /** A boolean value. */\n    FilterType[\"Boolean\"] = \"BOOLEAN\";\n    /** A list of selectable values. */\n    FilterType[\"List\"] = \"LIST\";\n    /** A range of prices. */\n    FilterType[\"PriceRange\"] = \"PRICE_RANGE\";\n})(FilterType || (FilterType = {}));\n/** List of supported image content types. */\nexport var ImageContentType;\n(function (ImageContentType) {\n    /** A JPG image. */\n    ImageContentType[\"Jpg\"] = \"JPG\";\n    /** A PNG image. */\n    ImageContentType[\"Png\"] = \"PNG\";\n    /** A WEBP image. */\n    ImageContentType[\"Webp\"] = \"WEBP\";\n})(ImageContentType || (ImageContentType = {}));\n/** ISO 639-1 language codes supported by Shopify. */\nexport var LanguageCode;\n(function (LanguageCode) {\n    /** Afrikaans. */\n    LanguageCode[\"Af\"] = \"AF\";\n    /** Akan. */\n    LanguageCode[\"Ak\"] = \"AK\";\n    /** Amharic. */\n    LanguageCode[\"Am\"] = \"AM\";\n    /** Arabic. */\n    LanguageCode[\"Ar\"] = \"AR\";\n    /** Assamese. */\n    LanguageCode[\"As\"] = \"AS\";\n    /** Azerbaijani. */\n    LanguageCode[\"Az\"] = \"AZ\";\n    /** Belarusian. */\n    LanguageCode[\"Be\"] = \"BE\";\n    /** Bulgarian. */\n    LanguageCode[\"Bg\"] = \"BG\";\n    /** Bambara. */\n    LanguageCode[\"Bm\"] = \"BM\";\n    /** Bangla. */\n    LanguageCode[\"Bn\"] = \"BN\";\n    /** Tibetan. */\n    LanguageCode[\"Bo\"] = \"BO\";\n    /** Breton. */\n    LanguageCode[\"Br\"] = \"BR\";\n    /** Bosnian. */\n    LanguageCode[\"Bs\"] = \"BS\";\n    /** Catalan. */\n    LanguageCode[\"Ca\"] = \"CA\";\n    /** Chechen. */\n    LanguageCode[\"Ce\"] = \"CE\";\n    /** Czech. */\n    LanguageCode[\"Cs\"] = \"CS\";\n    /** Church Slavic. */\n    LanguageCode[\"Cu\"] = \"CU\";\n    /** Welsh. */\n    LanguageCode[\"Cy\"] = \"CY\";\n    /** Danish. */\n    LanguageCode[\"Da\"] = \"DA\";\n    /** German. */\n    LanguageCode[\"De\"] = \"DE\";\n    /** Dzongkha. */\n    LanguageCode[\"Dz\"] = \"DZ\";\n    /** Ewe. */\n    LanguageCode[\"Ee\"] = \"EE\";\n    /** Greek. */\n    LanguageCode[\"El\"] = \"EL\";\n    /** English. */\n    LanguageCode[\"En\"] = \"EN\";\n    /** Esperanto. */\n    LanguageCode[\"Eo\"] = \"EO\";\n    /** Spanish. */\n    LanguageCode[\"Es\"] = \"ES\";\n    /** Estonian. */\n    LanguageCode[\"Et\"] = \"ET\";\n    /** Basque. */\n    LanguageCode[\"Eu\"] = \"EU\";\n    /** Persian. */\n    LanguageCode[\"Fa\"] = \"FA\";\n    /** Fulah. */\n    LanguageCode[\"Ff\"] = \"FF\";\n    /** Finnish. */\n    LanguageCode[\"Fi\"] = \"FI\";\n    /** Faroese. */\n    LanguageCode[\"Fo\"] = \"FO\";\n    /** French. */\n    LanguageCode[\"Fr\"] = \"FR\";\n    /** Western Frisian. */\n    LanguageCode[\"Fy\"] = \"FY\";\n    /** Irish. */\n    LanguageCode[\"Ga\"] = \"GA\";\n    /** Scottish Gaelic. */\n    LanguageCode[\"Gd\"] = \"GD\";\n    /** Galician. */\n    LanguageCode[\"Gl\"] = \"GL\";\n    /** Gujarati. */\n    LanguageCode[\"Gu\"] = \"GU\";\n    /** Manx. */\n    LanguageCode[\"Gv\"] = \"GV\";\n    /** Hausa. */\n    LanguageCode[\"Ha\"] = \"HA\";\n    /** Hebrew. */\n    LanguageCode[\"He\"] = \"HE\";\n    /** Hindi. */\n    LanguageCode[\"Hi\"] = \"HI\";\n    /** Croatian. */\n    LanguageCode[\"Hr\"] = \"HR\";\n    /** Hungarian. */\n    LanguageCode[\"Hu\"] = \"HU\";\n    /** Armenian. */\n    LanguageCode[\"Hy\"] = \"HY\";\n    /** Interlingua. */\n    LanguageCode[\"Ia\"] = \"IA\";\n    /** Indonesian. */\n    LanguageCode[\"Id\"] = \"ID\";\n    /** Igbo. */\n    LanguageCode[\"Ig\"] = \"IG\";\n    /** Sichuan Yi. */\n    LanguageCode[\"Ii\"] = \"II\";\n    /** Icelandic. */\n    LanguageCode[\"Is\"] = \"IS\";\n    /** Italian. */\n    LanguageCode[\"It\"] = \"IT\";\n    /** Japanese. */\n    LanguageCode[\"Ja\"] = \"JA\";\n    /** Javanese. */\n    LanguageCode[\"Jv\"] = \"JV\";\n    /** Georgian. */\n    LanguageCode[\"Ka\"] = \"KA\";\n    /** Kikuyu. */\n    LanguageCode[\"Ki\"] = \"KI\";\n    /** Kazakh. */\n    LanguageCode[\"Kk\"] = \"KK\";\n    /** Kalaallisut. */\n    LanguageCode[\"Kl\"] = \"KL\";\n    /** Khmer. */\n    LanguageCode[\"Km\"] = \"KM\";\n    /** Kannada. */\n    LanguageCode[\"Kn\"] = \"KN\";\n    /** Korean. */\n    LanguageCode[\"Ko\"] = \"KO\";\n    /** Kashmiri. */\n    LanguageCode[\"Ks\"] = \"KS\";\n    /** Kurdish. */\n    LanguageCode[\"Ku\"] = \"KU\";\n    /** Cornish. */\n    LanguageCode[\"Kw\"] = \"KW\";\n    /** Kyrgyz. */\n    LanguageCode[\"Ky\"] = \"KY\";\n    /** Luxembourgish. */\n    LanguageCode[\"Lb\"] = \"LB\";\n    /** Ganda. */\n    LanguageCode[\"Lg\"] = \"LG\";\n    /** Lingala. */\n    LanguageCode[\"Ln\"] = \"LN\";\n    /** Lao. */\n    LanguageCode[\"Lo\"] = \"LO\";\n    /** Lithuanian. */\n    LanguageCode[\"Lt\"] = \"LT\";\n    /** Luba-Katanga. */\n    LanguageCode[\"Lu\"] = \"LU\";\n    /** Latvian. */\n    LanguageCode[\"Lv\"] = \"LV\";\n    /** Malagasy. */\n    LanguageCode[\"Mg\"] = \"MG\";\n    /** Maori. */\n    LanguageCode[\"Mi\"] = \"MI\";\n    /** Macedonian. */\n    LanguageCode[\"Mk\"] = \"MK\";\n    /** Malayalam. */\n    LanguageCode[\"Ml\"] = \"ML\";\n    /** Mongolian. */\n    LanguageCode[\"Mn\"] = \"MN\";\n    /** Marathi. */\n    LanguageCode[\"Mr\"] = \"MR\";\n    /** Malay. */\n    LanguageCode[\"Ms\"] = \"MS\";\n    /** Maltese. */\n    LanguageCode[\"Mt\"] = \"MT\";\n    /** Burmese. */\n    LanguageCode[\"My\"] = \"MY\";\n    /** Norwegian (Bokmål). */\n    LanguageCode[\"Nb\"] = \"NB\";\n    /** North Ndebele. */\n    LanguageCode[\"Nd\"] = \"ND\";\n    /** Nepali. */\n    LanguageCode[\"Ne\"] = \"NE\";\n    /** Dutch. */\n    LanguageCode[\"Nl\"] = \"NL\";\n    /** Norwegian Nynorsk. */\n    LanguageCode[\"Nn\"] = \"NN\";\n    /** Norwegian. */\n    LanguageCode[\"No\"] = \"NO\";\n    /** Oromo. */\n    LanguageCode[\"Om\"] = \"OM\";\n    /** Odia. */\n    LanguageCode[\"Or\"] = \"OR\";\n    /** Ossetic. */\n    LanguageCode[\"Os\"] = \"OS\";\n    /** Punjabi. */\n    LanguageCode[\"Pa\"] = \"PA\";\n    /** Polish. */\n    LanguageCode[\"Pl\"] = \"PL\";\n    /** Pashto. */\n    LanguageCode[\"Ps\"] = \"PS\";\n    /** Portuguese. */\n    LanguageCode[\"Pt\"] = \"PT\";\n    /** Portuguese (Brazil). */\n    LanguageCode[\"PtBr\"] = \"PT_BR\";\n    /** Portuguese (Portugal). */\n    LanguageCode[\"PtPt\"] = \"PT_PT\";\n    /** Quechua. */\n    LanguageCode[\"Qu\"] = \"QU\";\n    /** Romansh. */\n    LanguageCode[\"Rm\"] = \"RM\";\n    /** Rundi. */\n    LanguageCode[\"Rn\"] = \"RN\";\n    /** Romanian. */\n    LanguageCode[\"Ro\"] = \"RO\";\n    /** Russian. */\n    LanguageCode[\"Ru\"] = \"RU\";\n    /** Kinyarwanda. */\n    LanguageCode[\"Rw\"] = \"RW\";\n    /** Sindhi. */\n    LanguageCode[\"Sd\"] = \"SD\";\n    /** Northern Sami. */\n    LanguageCode[\"Se\"] = \"SE\";\n    /** Sango. */\n    LanguageCode[\"Sg\"] = \"SG\";\n    /** Sinhala. */\n    LanguageCode[\"Si\"] = \"SI\";\n    /** Slovak. */\n    LanguageCode[\"Sk\"] = \"SK\";\n    /** Slovenian. */\n    LanguageCode[\"Sl\"] = \"SL\";\n    /** Shona. */\n    LanguageCode[\"Sn\"] = \"SN\";\n    /** Somali. */\n    LanguageCode[\"So\"] = \"SO\";\n    /** Albanian. */\n    LanguageCode[\"Sq\"] = \"SQ\";\n    /** Serbian. */\n    LanguageCode[\"Sr\"] = \"SR\";\n    /** Sundanese. */\n    LanguageCode[\"Su\"] = \"SU\";\n    /** Swedish. */\n    LanguageCode[\"Sv\"] = \"SV\";\n    /** Swahili. */\n    LanguageCode[\"Sw\"] = \"SW\";\n    /** Tamil. */\n    LanguageCode[\"Ta\"] = \"TA\";\n    /** Telugu. */\n    LanguageCode[\"Te\"] = \"TE\";\n    /** Tajik. */\n    LanguageCode[\"Tg\"] = \"TG\";\n    /** Thai. */\n    LanguageCode[\"Th\"] = \"TH\";\n    /** Tigrinya. */\n    LanguageCode[\"Ti\"] = \"TI\";\n    /** Turkmen. */\n    LanguageCode[\"Tk\"] = \"TK\";\n    /** Tongan. */\n    LanguageCode[\"To\"] = \"TO\";\n    /** Turkish. */\n    LanguageCode[\"Tr\"] = \"TR\";\n    /** Tatar. */\n    LanguageCode[\"Tt\"] = \"TT\";\n    /** Uyghur. */\n    LanguageCode[\"Ug\"] = \"UG\";\n    /** Ukrainian. */\n    LanguageCode[\"Uk\"] = \"UK\";\n    /** Urdu. */\n    LanguageCode[\"Ur\"] = \"UR\";\n    /** Uzbek. */\n    LanguageCode[\"Uz\"] = \"UZ\";\n    /** Vietnamese. */\n    LanguageCode[\"Vi\"] = \"VI\";\n    /** Volapük. */\n    LanguageCode[\"Vo\"] = \"VO\";\n    /** Wolof. */\n    LanguageCode[\"Wo\"] = \"WO\";\n    /** Xhosa. */\n    LanguageCode[\"Xh\"] = \"XH\";\n    /** Yiddish. */\n    LanguageCode[\"Yi\"] = \"YI\";\n    /** Yoruba. */\n    LanguageCode[\"Yo\"] = \"YO\";\n    /** Chinese. */\n    LanguageCode[\"Zh\"] = \"ZH\";\n    /** Chinese (Simplified). */\n    LanguageCode[\"ZhCn\"] = \"ZH_CN\";\n    /** Chinese (Traditional). */\n    LanguageCode[\"ZhTw\"] = \"ZH_TW\";\n    /** Zulu. */\n    LanguageCode[\"Zu\"] = \"ZU\";\n})(LanguageCode || (LanguageCode = {}));\n/** The set of valid sort keys for the Location query. */\nexport var LocationSortKeys;\n(function (LocationSortKeys) {\n    /** Sort by the `city` value. */\n    LocationSortKeys[\"City\"] = \"CITY\";\n    /** Sort by the `distance` value. */\n    LocationSortKeys[\"Distance\"] = \"DISTANCE\";\n    /** Sort by the `id` value. */\n    LocationSortKeys[\"Id\"] = \"ID\";\n    /** Sort by the `name` value. */\n    LocationSortKeys[\"Name\"] = \"NAME\";\n})(LocationSortKeys || (LocationSortKeys = {}));\n/** The possible content types for a media object. */\nexport var MediaContentType;\n(function (MediaContentType) {\n    /** An externally hosted video. */\n    MediaContentType[\"ExternalVideo\"] = \"EXTERNAL_VIDEO\";\n    /** A Shopify hosted image. */\n    MediaContentType[\"Image\"] = \"IMAGE\";\n    /** A 3d model. */\n    MediaContentType[\"Model_3D\"] = \"MODEL_3D\";\n    /** A Shopify hosted video. */\n    MediaContentType[\"Video\"] = \"VIDEO\";\n})(MediaContentType || (MediaContentType = {}));\n/** Host for a Media Resource. */\nexport var MediaHost;\n(function (MediaHost) {\n    /** Host for Vimeo embedded videos. */\n    MediaHost[\"Vimeo\"] = \"VIMEO\";\n    /** Host for YouTube embedded videos. */\n    MediaHost[\"Youtube\"] = \"YOUTUBE\";\n})(MediaHost || (MediaHost = {}));\n/** A menu item type. */\nexport var MenuItemType;\n(function (MenuItemType) {\n    /** An article link. */\n    MenuItemType[\"Article\"] = \"ARTICLE\";\n    /** A blog link. */\n    MenuItemType[\"Blog\"] = \"BLOG\";\n    /** A catalog link. */\n    MenuItemType[\"Catalog\"] = \"CATALOG\";\n    /** A collection link. */\n    MenuItemType[\"Collection\"] = \"COLLECTION\";\n    /** A collection link. */\n    MenuItemType[\"Collections\"] = \"COLLECTIONS\";\n    /** A frontpage link. */\n    MenuItemType[\"Frontpage\"] = \"FRONTPAGE\";\n    /** An http link. */\n    MenuItemType[\"Http\"] = \"HTTP\";\n    /** A page link. */\n    MenuItemType[\"Page\"] = \"PAGE\";\n    /** A product link. */\n    MenuItemType[\"Product\"] = \"PRODUCT\";\n    /** A search link. */\n    MenuItemType[\"Search\"] = \"SEARCH\";\n    /** A shop policy link. */\n    MenuItemType[\"ShopPolicy\"] = \"SHOP_POLICY\";\n})(MenuItemType || (MenuItemType = {}));\n/** Represents the reason for the order's cancellation. */\nexport var OrderCancelReason;\n(function (OrderCancelReason) {\n    /** The customer wanted to cancel the order. */\n    OrderCancelReason[\"Customer\"] = \"CUSTOMER\";\n    /** Payment was declined. */\n    OrderCancelReason[\"Declined\"] = \"DECLINED\";\n    /** The order was fraudulent. */\n    OrderCancelReason[\"Fraud\"] = \"FRAUD\";\n    /** There was insufficient inventory. */\n    OrderCancelReason[\"Inventory\"] = \"INVENTORY\";\n    /** The order was canceled for an unlisted reason. */\n    OrderCancelReason[\"Other\"] = \"OTHER\";\n})(OrderCancelReason || (OrderCancelReason = {}));\n/** Represents the order's current financial status. */\nexport var OrderFinancialStatus;\n(function (OrderFinancialStatus) {\n    /** Displayed as **Authorized**. */\n    OrderFinancialStatus[\"Authorized\"] = \"AUTHORIZED\";\n    /** Displayed as **Paid**. */\n    OrderFinancialStatus[\"Paid\"] = \"PAID\";\n    /** Displayed as **Partially paid**. */\n    OrderFinancialStatus[\"PartiallyPaid\"] = \"PARTIALLY_PAID\";\n    /** Displayed as **Partially refunded**. */\n    OrderFinancialStatus[\"PartiallyRefunded\"] = \"PARTIALLY_REFUNDED\";\n    /** Displayed as **Pending**. */\n    OrderFinancialStatus[\"Pending\"] = \"PENDING\";\n    /** Displayed as **Refunded**. */\n    OrderFinancialStatus[\"Refunded\"] = \"REFUNDED\";\n    /** Displayed as **Voided**. */\n    OrderFinancialStatus[\"Voided\"] = \"VOIDED\";\n})(OrderFinancialStatus || (OrderFinancialStatus = {}));\n/** Represents the order's aggregated fulfillment status for display purposes. */\nexport var OrderFulfillmentStatus;\n(function (OrderFulfillmentStatus) {\n    /** Displayed as **Fulfilled**. All of the items in the order have been fulfilled. */\n    OrderFulfillmentStatus[\"Fulfilled\"] = \"FULFILLED\";\n    /** Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for fulfillment has been sent to the fulfillment service. */\n    OrderFulfillmentStatus[\"InProgress\"] = \"IN_PROGRESS\";\n    /** Displayed as **On hold**. All of the unfulfilled items in this order are on hold. */\n    OrderFulfillmentStatus[\"OnHold\"] = \"ON_HOLD\";\n    /** Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by \"UNFULFILLED\" status. */\n    OrderFulfillmentStatus[\"Open\"] = \"OPEN\";\n    /** Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled. */\n    OrderFulfillmentStatus[\"PartiallyFulfilled\"] = \"PARTIALLY_FULFILLED\";\n    /** Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by \"IN_PROGRESS\" status. */\n    OrderFulfillmentStatus[\"PendingFulfillment\"] = \"PENDING_FULFILLMENT\";\n    /** Displayed as **Restocked**. All of the items in the order have been restocked. Replaced by \"UNFULFILLED\" status. */\n    OrderFulfillmentStatus[\"Restocked\"] = \"RESTOCKED\";\n    /** Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time. */\n    OrderFulfillmentStatus[\"Scheduled\"] = \"SCHEDULED\";\n    /** Displayed as **Unfulfilled**. None of the items in the order have been fulfilled. */\n    OrderFulfillmentStatus[\"Unfulfilled\"] = \"UNFULFILLED\";\n})(OrderFulfillmentStatus || (OrderFulfillmentStatus = {}));\n/** The set of valid sort keys for the Order query. */\nexport var OrderSortKeys;\n(function (OrderSortKeys) {\n    /** Sort by the `id` value. */\n    OrderSortKeys[\"Id\"] = \"ID\";\n    /** Sort by the `processed_at` value. */\n    OrderSortKeys[\"ProcessedAt\"] = \"PROCESSED_AT\";\n    /**\n     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.\n     * Don't use this sort key when no search query is specified.\n     *\n     */\n    OrderSortKeys[\"Relevance\"] = \"RELEVANCE\";\n    /** Sort by the `total_price` value. */\n    OrderSortKeys[\"TotalPrice\"] = \"TOTAL_PRICE\";\n})(OrderSortKeys || (OrderSortKeys = {}));\n/** The set of valid sort keys for the Page query. */\nexport var PageSortKeys;\n(function (PageSortKeys) {\n    /** Sort by the `id` value. */\n    PageSortKeys[\"Id\"] = \"ID\";\n    /**\n     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.\n     * Don't use this sort key when no search query is specified.\n     *\n     */\n    PageSortKeys[\"Relevance\"] = \"RELEVANCE\";\n    /** Sort by the `title` value. */\n    PageSortKeys[\"Title\"] = \"TITLE\";\n    /** Sort by the `updated_at` value. */\n    PageSortKeys[\"UpdatedAt\"] = \"UPDATED_AT\";\n})(PageSortKeys || (PageSortKeys = {}));\n/** The valid values for the types of payment token. */\nexport var PaymentTokenType;\n(function (PaymentTokenType) {\n    /** Apple Pay token type. */\n    PaymentTokenType[\"ApplePay\"] = \"APPLE_PAY\";\n    /** Google Pay token type. */\n    PaymentTokenType[\"GooglePay\"] = \"GOOGLE_PAY\";\n    /** Shopify Pay token type. */\n    PaymentTokenType[\"ShopifyPay\"] = \"SHOPIFY_PAY\";\n    /** Stripe token type. */\n    PaymentTokenType[\"StripeVaultToken\"] = \"STRIPE_VAULT_TOKEN\";\n    /** Vault payment token type. */\n    PaymentTokenType[\"Vault\"] = \"VAULT\";\n})(PaymentTokenType || (PaymentTokenType = {}));\n/** The set of valid sort keys for the ProductCollection query. */\nexport var ProductCollectionSortKeys;\n(function (ProductCollectionSortKeys) {\n    /** Sort by the `best-selling` value. */\n    ProductCollectionSortKeys[\"BestSelling\"] = \"BEST_SELLING\";\n    /** Sort by the `collection-default` value. */\n    ProductCollectionSortKeys[\"CollectionDefault\"] = \"COLLECTION_DEFAULT\";\n    /** Sort by the `created` value. */\n    ProductCollectionSortKeys[\"Created\"] = \"CREATED\";\n    /** Sort by the `id` value. */\n    ProductCollectionSortKeys[\"Id\"] = \"ID\";\n    /** Sort by the `manual` value. */\n    ProductCollectionSortKeys[\"Manual\"] = \"MANUAL\";\n    /** Sort by the `price` value. */\n    ProductCollectionSortKeys[\"Price\"] = \"PRICE\";\n    /**\n     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.\n     * Don't use this sort key when no search query is specified.\n     *\n     */\n    ProductCollectionSortKeys[\"Relevance\"] = \"RELEVANCE\";\n    /** Sort by the `title` value. */\n    ProductCollectionSortKeys[\"Title\"] = \"TITLE\";\n})(ProductCollectionSortKeys || (ProductCollectionSortKeys = {}));\n/** The set of valid sort keys for the ProductImage query. */\nexport var ProductImageSortKeys;\n(function (ProductImageSortKeys) {\n    /** Sort by the `created_at` value. */\n    ProductImageSortKeys[\"CreatedAt\"] = \"CREATED_AT\";\n    /** Sort by the `id` value. */\n    ProductImageSortKeys[\"Id\"] = \"ID\";\n    /** Sort by the `position` value. */\n    ProductImageSortKeys[\"Position\"] = \"POSITION\";\n    /**\n     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.\n     * Don't use this sort key when no search query is specified.\n     *\n     */\n    ProductImageSortKeys[\"Relevance\"] = \"RELEVANCE\";\n})(ProductImageSortKeys || (ProductImageSortKeys = {}));\n/** The set of valid sort keys for the ProductMedia query. */\nexport var ProductMediaSortKeys;\n(function (ProductMediaSortKeys) {\n    /** Sort by the `id` value. */\n    ProductMediaSortKeys[\"Id\"] = \"ID\";\n    /** Sort by the `position` value. */\n    ProductMediaSortKeys[\"Position\"] = \"POSITION\";\n    /**\n     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.\n     * Don't use this sort key when no search query is specified.\n     *\n     */\n    ProductMediaSortKeys[\"Relevance\"] = \"RELEVANCE\";\n})(ProductMediaSortKeys || (ProductMediaSortKeys = {}));\n/** The set of valid sort keys for the Product query. */\nexport var ProductSortKeys;\n(function (ProductSortKeys) {\n    /** Sort by the `best_selling` value. */\n    ProductSortKeys[\"BestSelling\"] = \"BEST_SELLING\";\n    /** Sort by the `created_at` value. */\n    ProductSortKeys[\"CreatedAt\"] = \"CREATED_AT\";\n    /** Sort by the `id` value. */\n    ProductSortKeys[\"Id\"] = \"ID\";\n    /** Sort by the `price` value. */\n    ProductSortKeys[\"Price\"] = \"PRICE\";\n    /** Sort by the `product_type` value. */\n    ProductSortKeys[\"ProductType\"] = \"PRODUCT_TYPE\";\n    /**\n     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.\n     * Don't use this sort key when no search query is specified.\n     *\n     */\n    ProductSortKeys[\"Relevance\"] = \"RELEVANCE\";\n    /** Sort by the `title` value. */\n    ProductSortKeys[\"Title\"] = \"TITLE\";\n    /** Sort by the `updated_at` value. */\n    ProductSortKeys[\"UpdatedAt\"] = \"UPDATED_AT\";\n    /** Sort by the `vendor` value. */\n    ProductSortKeys[\"Vendor\"] = \"VENDOR\";\n})(ProductSortKeys || (ProductSortKeys = {}));\n/** The set of valid sort keys for the ProductVariant query. */\nexport var ProductVariantSortKeys;\n(function (ProductVariantSortKeys) {\n    /** Sort by the `id` value. */\n    ProductVariantSortKeys[\"Id\"] = \"ID\";\n    /** Sort by the `position` value. */\n    ProductVariantSortKeys[\"Position\"] = \"POSITION\";\n    /**\n     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.\n     * Don't use this sort key when no search query is specified.\n     *\n     */\n    ProductVariantSortKeys[\"Relevance\"] = \"RELEVANCE\";\n    /** Sort by the `sku` value. */\n    ProductVariantSortKeys[\"Sku\"] = \"SKU\";\n    /** Sort by the `title` value. */\n    ProductVariantSortKeys[\"Title\"] = \"TITLE\";\n})(ProductVariantSortKeys || (ProductVariantSortKeys = {}));\n/** The checkout charge when the full amount isn't charged at checkout. */\nexport var SellingPlanCheckoutChargeType;\n(function (SellingPlanCheckoutChargeType) {\n    /** The checkout charge is a percentage of the product or variant price. */\n    SellingPlanCheckoutChargeType[\"Percentage\"] = \"PERCENTAGE\";\n    /** The checkout charge is a fixed price amount. */\n    SellingPlanCheckoutChargeType[\"Price\"] = \"PRICE\";\n})(SellingPlanCheckoutChargeType || (SellingPlanCheckoutChargeType = {}));\n/** The different kinds of order transactions. */\nexport var TransactionKind;\n(function (TransactionKind) {\n    /**\n     * An amount reserved against the cardholder's funding source.\n     * Money does not change hands until the authorization is captured.\n     *\n     */\n    TransactionKind[\"Authorization\"] = \"AUTHORIZATION\";\n    /** A transfer of the money that was reserved during the authorization stage. */\n    TransactionKind[\"Capture\"] = \"CAPTURE\";\n    /** Money returned to the customer when they have paid too much. */\n    TransactionKind[\"Change\"] = \"CHANGE\";\n    /** An authorization for a payment taken with an EMV credit card reader. */\n    TransactionKind[\"EmvAuthorization\"] = \"EMV_AUTHORIZATION\";\n    /** An authorization and capture performed together in a single step. */\n    TransactionKind[\"Sale\"] = \"SALE\";\n})(TransactionKind || (TransactionKind = {}));\n/** Transaction statuses describe the status of a transaction. */\nexport var TransactionStatus;\n(function (TransactionStatus) {\n    /** There was an error while processing the transaction. */\n    TransactionStatus[\"Error\"] = \"ERROR\";\n    /** The transaction failed. */\n    TransactionStatus[\"Failure\"] = \"FAILURE\";\n    /** The transaction is pending. */\n    TransactionStatus[\"Pending\"] = \"PENDING\";\n    /** The transaction succeeded. */\n    TransactionStatus[\"Success\"] = \"SUCCESS\";\n})(TransactionStatus || (TransactionStatus = {}));\n/** The accepted types of unit of measurement. */\nexport var UnitPriceMeasurementMeasuredType;\n(function (UnitPriceMeasurementMeasuredType) {\n    /** Unit of measurements representing areas. */\n    UnitPriceMeasurementMeasuredType[\"Area\"] = \"AREA\";\n    /** Unit of measurements representing lengths. */\n    UnitPriceMeasurementMeasuredType[\"Length\"] = \"LENGTH\";\n    /** Unit of measurements representing volumes. */\n    UnitPriceMeasurementMeasuredType[\"Volume\"] = \"VOLUME\";\n    /** Unit of measurements representing weights. */\n    UnitPriceMeasurementMeasuredType[\"Weight\"] = \"WEIGHT\";\n})(UnitPriceMeasurementMeasuredType || (UnitPriceMeasurementMeasuredType = {}));\n/** The valid units of measurement for a unit price measurement. */\nexport var UnitPriceMeasurementMeasuredUnit;\n(function (UnitPriceMeasurementMeasuredUnit) {\n    /** 100 centiliters equals 1 liter. */\n    UnitPriceMeasurementMeasuredUnit[\"Cl\"] = \"CL\";\n    /** 100 centimeters equals 1 meter. */\n    UnitPriceMeasurementMeasuredUnit[\"Cm\"] = \"CM\";\n    /** Metric system unit of weight. */\n    UnitPriceMeasurementMeasuredUnit[\"G\"] = \"G\";\n    /** 1 kilogram equals 1000 grams. */\n    UnitPriceMeasurementMeasuredUnit[\"Kg\"] = \"KG\";\n    /** Metric system unit of volume. */\n    UnitPriceMeasurementMeasuredUnit[\"L\"] = \"L\";\n    /** Metric system unit of length. */\n    UnitPriceMeasurementMeasuredUnit[\"M\"] = \"M\";\n    /** Metric system unit of area. */\n    UnitPriceMeasurementMeasuredUnit[\"M2\"] = \"M2\";\n    /** 1 cubic meter equals 1000 liters. */\n    UnitPriceMeasurementMeasuredUnit[\"M3\"] = \"M3\";\n    /** 1000 milligrams equals 1 gram. */\n    UnitPriceMeasurementMeasuredUnit[\"Mg\"] = \"MG\";\n    /** 1000 milliliters equals 1 liter. */\n    UnitPriceMeasurementMeasuredUnit[\"Ml\"] = \"ML\";\n    /** 1000 millimeters equals 1 meter. */\n    UnitPriceMeasurementMeasuredUnit[\"Mm\"] = \"MM\";\n})(UnitPriceMeasurementMeasuredUnit || (UnitPriceMeasurementMeasuredUnit = {}));\n/** Systems of weights and measures. */\nexport var UnitSystem;\n(function (UnitSystem) {\n    /** Imperial system of weights and measures. */\n    UnitSystem[\"ImperialSystem\"] = \"IMPERIAL_SYSTEM\";\n    /** Metric system of weights and measures. */\n    UnitSystem[\"MetricSystem\"] = \"METRIC_SYSTEM\";\n})(UnitSystem || (UnitSystem = {}));\n/** Units of measurement for weight. */\nexport var WeightUnit;\n(function (WeightUnit) {\n    /** Metric system unit of mass. */\n    WeightUnit[\"Grams\"] = \"GRAMS\";\n    /** 1 kilogram equals 1000 grams. */\n    WeightUnit[\"Kilograms\"] = \"KILOGRAMS\";\n    /** Imperial system unit of mass. */\n    WeightUnit[\"Ounces\"] = \"OUNCES\";\n    /** 1 pound equals 16 ounces. */\n    WeightUnit[\"Pounds\"] = \"POUNDS\";\n})(WeightUnit || (WeightUnit = {}));\n","import { ShopifyContext } from '../ShopifyProvider';\nimport { useEnvContext } from '../ssr-interop';\n/**\n * The `useShop` hook provides access to values within\n * [the `shopify` property in the `hydrogen.config.js` file](https://shopify.dev/custom-storefronts/hydrogen/framework/hydrogen-config).\n * The `useShop` hook must be a descendent of a `ShopifyProvider` component.\n */\nexport function useShop() {\n    const config = useEnvContext((req) => req.ctx.shopifyConfig, ShopifyContext);\n    if (!config) {\n        throw new Error('No Shopify Context found');\n    }\n    return config;\n}\n","import React, { useState } from 'react';\nimport { useShop } from '../../foundation';\nimport { flattenConnection } from '../../utilities';\nimport { CartCreate, defaultCartFragment } from './cart-queries';\nimport { SHOPIFY_STOREFRONT_ID_HEADER, STOREFRONT_API_PUBLIC_TOKEN_HEADER, SHOPIFY_STOREFRONT_Y_HEADER, SHOPIFY_STOREFRONT_S_HEADER, SHOPIFY_Y, SHOPIFY_S, } from '../../constants';\nimport { parse } from 'worktop/cookie';\nexport function useCartFetch() {\n    const { storeDomain, storefrontApiVersion, storefrontToken, storefrontId } = useShop();\n    return React.useCallback(({ query, variables, }) => {\n        const headers = {\n            'Content-Type': 'application/json',\n            'X-SDK-Variant': 'hydrogen',\n            'X-SDK-Version': storefrontApiVersion,\n            [STOREFRONT_API_PUBLIC_TOKEN_HEADER]: storefrontToken,\n        };\n        if (storefrontId) {\n            headers[SHOPIFY_STOREFRONT_ID_HEADER] = storefrontId;\n        }\n        // Find Shopify cookies\n        const cookieData = parse(document.cookie);\n        if (cookieData[SHOPIFY_Y] && cookieData[SHOPIFY_S]) {\n            headers[SHOPIFY_STOREFRONT_Y_HEADER] = cookieData[SHOPIFY_Y];\n            headers[SHOPIFY_STOREFRONT_S_HEADER] = cookieData[SHOPIFY_S];\n        }\n        return fetch(`https://${storeDomain}/api/${storefrontApiVersion}/graphql.json`, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify({\n                query: query.toString(),\n                variables,\n            }),\n        })\n            .then((res) => res.json())\n            .catch((error) => {\n            return {\n                data: undefined,\n                error: error.toString(),\n            };\n        });\n    }, [storeDomain, storefrontApiVersion, storefrontToken, storefrontId]);\n}\nexport function useInstantCheckout() {\n    const [cart, updateCart] = useState();\n    const [checkoutUrl, updateCheckoutUrl] = useState();\n    const [error, updateError] = useState();\n    const fetch = useCartFetch();\n    const createInstantCheckout = React.useCallback(async (cartInput) => {\n        const { data, errors } = await fetch({\n            query: CartCreate(defaultCartFragment),\n            variables: {\n                input: cartInput,\n            },\n        });\n        if (errors) {\n            updateError(errors);\n            updateCart(undefined);\n            updateCheckoutUrl(undefined);\n        }\n        if (data?.cartCreate?.cart) {\n            const dataCart = data.cartCreate.cart;\n            updateCart({\n                ...dataCart,\n                // @ts-expect-error While the cart still uses fragments, there will be a TS error here until we remove those fragments and get the type in-line\n                lines: flattenConnection(dataCart.lines),\n                note: dataCart.note ?? undefined,\n            });\n            updateCheckoutUrl(dataCart.checkoutUrl);\n        }\n    }, [fetch]);\n    return { cart, checkoutUrl, error, createInstantCheckout };\n}\n","import { createContext } from 'react';\nexport const CartContext = createContext(null);\n","import { createContext } from 'react';\nexport const CartLineContext = createContext(null);\n","export function getAllOptionValues(variants, option) {\n    return Array.from(new Set(variants.map((variant) => variant.selectedOptions.find((selection) => selection.name == option)\n        .value)));\n}\nexport function getSelectedVariant(variants, choices) {\n    /**\n     * Ensure the user has selected all the required options, not just some.\n     */\n    if (!variants.length ||\n        variants?.[0]?.selectedOptions?.length !== Object.keys(choices).length) {\n        return;\n    }\n    return variants?.find((variant) => {\n        return Object.entries(choices).every(([name, value]) => {\n            return variant?.selectedOptions?.some((option) => option?.name === name && option?.value === value);\n        });\n    });\n}\nexport function getOptions(variants) {\n    const map = variants.reduce((memo, variant) => {\n        if (!variant.selectedOptions) {\n            throw new Error(`'getOptions' requires 'variant.selectedOptions'`);\n        }\n        variant?.selectedOptions?.forEach((opt) => {\n            memo[opt?.name ?? ''] = memo[opt?.name ?? ''] || new Set();\n            memo[opt?.name ?? ''].add(opt?.value ?? '');\n        });\n        return memo;\n    }, {});\n    return Object.keys(map).map((option) => {\n        return {\n            name: option,\n            values: Array.from(map[option]),\n        };\n    });\n}\n","import React, { useMemo, useState, useEffect, useCallback } from 'react';\nimport { ProductOptionsContext } from './context';\nimport { getSelectedVariant, getOptions, } from '../../hooks/useProductOptions/helpers';\nimport { flattenConnection } from '../../utilities/flattenConnection';\nexport function ProductOptionsProvider({ children, data: product, initialVariantId: explicitVariantId, }) {\n    // The flattened variants\n    const variants = useMemo(() => flattenConnection(product.variants ?? {}), [product.variants]);\n    if (!isProductVariantArray(variants)) {\n        throw new Error(`<ProductOptionsProvider/> requires 'product.variants.nodes' or 'product.variants.edges'`);\n    }\n    // All the options available for a product, based on all the variants\n    const options = useMemo(() => getOptions(variants), [variants]);\n    /**\n     * Track the selectedVariant within the provider.\n     */\n    const [selectedVariant, setSelectedVariant] = useState(() => getVariantBasedOnIdProp(explicitVariantId, variants));\n    /**\n     * Track the selectedOptions within the provider. If a `initialVariantId`\n     * is passed, use that to select initial options.\n     */\n    const [selectedOptions, setSelectedOptions] = useState(() => getSelectedOptions(selectedVariant));\n    /**\n     * When the initialVariantId changes, we need to make sure we\n     * update the selected variant and selected options. If not,\n     * then the selected variant and options will reference incorrect\n     * values.\n     */\n    useEffect(() => {\n        const newSelectedVariant = getVariantBasedOnIdProp(explicitVariantId, variants);\n        setSelectedVariant(newSelectedVariant);\n        setSelectedOptions(getSelectedOptions(newSelectedVariant));\n    }, [explicitVariantId, variants]);\n    /**\n     * Allow the developer to select an option.\n     */\n    const setSelectedOption = useCallback((name, value) => {\n        setSelectedOptions((selectedOptions) => {\n            const opts = { ...selectedOptions, [name]: value };\n            setSelectedVariant(getSelectedVariant(variants, opts));\n            return opts;\n        });\n    }, [setSelectedOptions, variants]);\n    const isOptionInStock = useCallback((option, value) => {\n        const proposedVariant = getSelectedVariant(variants, {\n            ...selectedOptions,\n            ...{ [option]: value },\n        });\n        return proposedVariant?.availableForSale ?? true;\n    }, [selectedOptions, variants]);\n    const sellingPlanGroups = useMemo(() => flattenConnection(product.sellingPlanGroups ?? {}).map((sellingPlanGroup) => ({\n        ...sellingPlanGroup,\n        sellingPlans: flattenConnection(sellingPlanGroup?.sellingPlans ?? {}),\n    })), [product.sellingPlanGroups]);\n    /**\n     * Track the selectedSellingPlan within the hook. If `initialSellingPlanId`\n     * is passed, use that as an initial value. Look it up from the `selectedVariant`, since\n     * that is also a requirement.\n     */\n    const [selectedSellingPlan, setSelectedSellingPlan] = useState(undefined);\n    const selectedSellingPlanAllocation = useMemo(() => {\n        if (!selectedVariant || !selectedSellingPlan) {\n            return;\n        }\n        if (!selectedVariant.sellingPlanAllocations?.nodes &&\n            !selectedVariant.sellingPlanAllocations?.edges) {\n            throw new Error(`<ProductOptionsProvider/>: You must include 'sellingPlanAllocations.nodes' or 'sellingPlanAllocations.edges' in your variants in order to calculate selectedSellingPlanAllocation`);\n        }\n        return flattenConnection(selectedVariant.sellingPlanAllocations).find((allocation) => allocation?.sellingPlan?.id === selectedSellingPlan.id);\n    }, [selectedVariant, selectedSellingPlan]);\n    const value = useMemo(() => ({\n        variants,\n        variantsConnection: product.variants,\n        options,\n        selectedVariant,\n        setSelectedVariant,\n        selectedOptions,\n        setSelectedOption,\n        setSelectedOptions,\n        isOptionInStock,\n        selectedSellingPlan,\n        setSelectedSellingPlan,\n        selectedSellingPlanAllocation,\n        sellingPlanGroups,\n        sellingPlanGroupsConnection: product.sellingPlanGroups,\n    }), [\n        isOptionInStock,\n        options,\n        product.sellingPlanGroups,\n        product.variants,\n        selectedOptions,\n        selectedSellingPlan,\n        selectedSellingPlanAllocation,\n        selectedVariant,\n        sellingPlanGroups,\n        setSelectedOption,\n        variants,\n    ]);\n    return (React.createElement(ProductOptionsContext.Provider, { value: value }, children));\n}\nfunction getVariantBasedOnIdProp(explicitVariantId, variants) {\n    // get the initial variant based on the logic outlined in the comments for 'initialVariantId' above\n    // * 1. If `initialVariantId` is provided, then it's used even if it's out of stock.\n    if (explicitVariantId) {\n        const foundVariant = variants.find((variant) => variant?.id === explicitVariantId);\n        if (!foundVariant) {\n            console.warn(`<ProductOptionsProvider/> received a 'initialVariantId' prop, but could not actually find a variant with that ID`);\n        }\n        return foundVariant;\n    }\n    // * 2. If `initialVariantId` is provided but is `null`, then no variant is used.\n    if (explicitVariantId === null) {\n        return null;\n    }\n    // * 3. If nothing is passed to `initialVariantId` then the first available / in-stock variant is used.\n    // * 4. If nothing is passed to `initialVariantId` and no variants are in stock, then the first variant is used.\n    if (explicitVariantId === undefined) {\n        return variants.find((variant) => variant?.availableForSale) || variants[0];\n    }\n}\nfunction getSelectedOptions(selectedVariant) {\n    return selectedVariant?.selectedOptions\n        ? selectedVariant.selectedOptions.reduce((memo, optionSet) => {\n            memo[optionSet?.name ?? ''] = optionSet?.value ?? '';\n            return memo;\n        }, {})\n        : {};\n}\nfunction isProductVariantArray(maybeVariantArray) {\n    if (!maybeVariantArray || !Array.isArray(maybeVariantArray)) {\n        return false;\n    }\n    return true;\n}\n","import React from 'react';\nimport { Money } from '../Money';\nimport { flattenConnection } from '../../utilities/flattenConnection';\n/**\n * The `ProductPrice` component renders a `Money` component with the product\n * [`priceRange`](https://shopify.dev/api/storefront/reference/products/productpricerange)'s `maxVariantPrice` or `minVariantPrice`, for either the regular price or compare at price range.\n */\nexport function ProductPrice(props) {\n    const { priceType = 'regular', variantId, valueType = 'min', data: product, ...passthroughProps } = props;\n    if (product == null) {\n        throw new Error(`<ProductPrice/> requires a product as the 'data' prop`);\n    }\n    let price;\n    let measurement;\n    const variant = variantId\n        ? flattenConnection(product?.variants ?? {}).find((variant) => variant?.id === variantId) ?? null\n        : null;\n    if (priceType === 'compareAt') {\n        if (variantId && variant) {\n            if (variant.compareAtPriceV2?.amount === variant.priceV2?.amount) {\n                return null;\n            }\n            price = variant.compareAtPriceV2;\n        }\n        else if (valueType === 'max') {\n            price = product?.compareAtPriceRange?.maxVariantPrice;\n        }\n        else {\n            price = product?.compareAtPriceRange?.minVariantPrice;\n        }\n    }\n    else {\n        if (variantId && variant) {\n            price = variant.priceV2;\n            if (valueType === 'unit') {\n                price = variant.unitPrice;\n                measurement = variant.unitPriceMeasurement;\n            }\n        }\n        else if (valueType === 'max') {\n            price = product.priceRange?.maxVariantPrice;\n        }\n        else {\n            price = product.priceRange?.minVariantPrice;\n        }\n    }\n    if (!price) {\n        return null;\n    }\n    if (measurement) {\n        return (React.createElement(Money, { ...passthroughProps, data: price, measurement: measurement }));\n    }\n    return React.createElement(Money, { ...passthroughProps, data: price });\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { useInstantCheckout } from '../CartProvider';\nimport { BaseButton } from '../BaseButton';\n/** The `BuyNowButton` component renders a button that adds an item to the cart and redirects the customer to checkout. */\nexport function BuyNowButton(props) {\n    const { createInstantCheckout, checkoutUrl } = useInstantCheckout();\n    const [loading, setLoading] = useState(false);\n    const { quantity, variantId, onClick, attributes, children, ...passthroughProps } = props;\n    useEffect(() => {\n        if (checkoutUrl) {\n            window.location.href = checkoutUrl;\n        }\n    }, [checkoutUrl]);\n    const handleBuyNow = useCallback(() => {\n        setLoading(true);\n        createInstantCheckout({\n            lines: [\n                {\n                    quantity: quantity ?? 1,\n                    merchandiseId: variantId,\n                    attributes,\n                },\n            ],\n        });\n    }, [createInstantCheckout, quantity, variantId, attributes]);\n    return (React.createElement(BaseButton, { disabled: loading ?? passthroughProps.disabled, ...passthroughProps, onClick: onClick, defaultOnClick: handleBuyNow }, children));\n}\n","import {\n  ProductOptionsProvider,\n  MediaFile,\n  useProductOptions,\n  ProductPrice,\n  BuyNowButton,\n} from \"@shopify/hydrogen\";\n\nexport default function ProductDetails({ product }) {\n  return (\n    <ProductOptionsProvider data={product}>\n      <section className=\"w-full overflow-x-hidden gap-4 md:gap-8 grid px-6 md:px-8 lg:px-12\">\n        <div className=\"grid items-start gap-6 lg:gap-20 md:grid-cols-2 lg:grid-cols-3\">\n          <div className=\"grid md:grid-flow-row  md:p-0 md:overflow-x-auto md:grid-cols-2 md:w-full lg:col-span-2\">\n            <div className=\"md:col-span-2 snap-center card-image aspect-square md:w-full w-[80vw] shadow rounded\">\n              <ProductGallery media={product.media.nodes} />\n            </div>\n          </div>\n          <div className=\"sticky md:mx-auto max-w-xl md:max-w-[24rem] grid gap-8 p-0 md:p-6 md:px-0 top-[6rem] lg:top-[8rem] xl:top-[10rem]\">\n            <div className=\"grid gap-2\">\n              <h1 className=\"text-4xl font-bold leading-10 whitespace-normal\">\n                {product.title}\n              </h1>\n              <span className=\"max-w-prose whitespace-pre-wrap inherit text-copy opacity-50 font-medium\">\n                {product.vendor}\n              </span>\n            </div>\n            <ProductForm product={product} />\n            <div className=\"mt-8\">\n              <div\n                className=\"prose border-t border-gray-200 pt-6 text-black text-md\"\n                dangerouslySetInnerHTML={{ __html: product.descriptionHtml }}\n              ></div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </ProductOptionsProvider>\n  );\n}\n\nfunction ProductForm({ product }) {\n  const { options, selectedVariant } = useProductOptions();\n console.log(options);\n  const isOutOfStock = !selectedVariant?.availableForSale || false;\n  return (\n    <form className=\"grid gap-10\">\n      {\n        <div className=\"grid gap-4\">\n          {options.map(({ name, values }) => {\n            if (values.length === 1) {\n              return null;\n            }\n            return (\n              <div\n                key={name}\n                className=\"flex flex-wrap items-baseline justify-start gap-6\"\n              >\n                <legend className=\"whitespace-pre-wrap max-w-prose font-bold text-lead min-w-[4rem]\">\n                  {name}\n                </legend>\n                <div className=\"flex flex-wrap items-baseline gap-4\">\n                  <OptionRadio name={name} values={values} />\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      }\n      <div>\n        <ProductPrice\n          className=\"text-gray-500 line-through text-lg font-semibold\"\n          priceType=\"compareAt\"\n          variantId={selectedVariant.id}\n          data={product}\n        />\n        <ProductPrice\n          className=\"text-gray-900 text-lg font-semibold\"\n          variantId={selectedVariant.id}\n          data={product}\n        />\n      </div>\n      <div className=\"grid items-stretch gap-4\">\n        {isOutOfStock ? (\n          <span className=\"text-black text-center py-3 px-6 border rounded-sm leading-none \">\n            Available in 2-3 weeks\n          </span>\n        ) : (\n          <BuyNowButton variantId={selectedVariant.id}>\n            <span className=\"bg-black text-white inline-block rounded-sm font-medium text-center py-3 px-6 max-w-xl leading-none w-full border\">\n              Buy it now\n            </span>\n          </BuyNowButton>\n        )}\n      </div>\n    </form>\n  );\n}\n\nfunction OptionRadio({ values, name }) {\n  const { selectedOptions, setSelectedOption } = useProductOptions();\n  // console.log(\"---\",selectedOptions);\n  return (\n    <>\n      {values.map((value) => {\n        const checked = selectedOptions[name] === value;\n        const id = `option-${name}-${value}`;\n\n        return (\n          <label key={id} htmlFor={id}>\n            <input\n              className=\"sr-only\"\n              type=\"radio\"\n              id={id}\n              name={`option[${name}]`}\n              value={value}\n              checked={checked}\n              onChange={() => setSelectedOption(name, value)}\n            />\n            <div\n              className={`leading-none border-b-[2px] py-1 cursor-pointer transition-all duration-200 ${\n                checked ? \"border-gray-500\" : \"border-neutral-50\"\n              }`}\n            >\n              {value}\n            </div>\n          </label>\n        );\n      })}\n    </>\n  );\n}\n\nfunction ProductGallery({ media }) {\n  if (!media.length) {\n    return null;\n  }\n\n  return (\n    <div\n      className={`grid gap-4 overflow-x-scroll grid-flow-col md:grid-flow-row  md:p-0 md:overflow-x-auto md:grid-cols-2 w-screen md:w-full lg:col-span-2`}\n    >\n      {media.map((med, i) => {\n        let extraProps = {};\n\n        if (med.mediaContentType === \"MODEL_3D\") {\n          extraProps = {\n            interactionPromptThreshold: \"0\",\n            ar: true,\n            loading: \"eager\",\n            disableZoom: true,\n          };\n        }\n\n        const data = {\n          ...med,\n          image: {\n            ...med.image,\n            altText: med.alt || \"Product image\",\n          },\n        };\n\n        return (\n          <div\n            className={`${\n              i % 3 === 0 ? \"md:col-span-2\" : \"md:col-span-1\"\n            } snap-center card-image bg-white aspect-square md:w-full w-[80vw] shadow-sm rounded`}\n            key={med.id || med.image.id}\n          >\n            <MediaFile\n              tabIndex=\"0\"\n              className={`w-full h-full aspect-square object-cover`}\n              data={data}\n              options={{\n                crop: \"center\",\n              }}\n              {...extraProps}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"],"names":["useContext","useMemo","React.createElement","parse","useState","createContext","children","data","product","initialVariantId","explicitVariantId","variants","flattenConnection","isProductVariantArray","Error","options","getOptions","selectedVariant","setSelectedVariant","getVariantBasedOnIdProp","selectedOptions","setSelectedOptions","getSelectedOptions","useEffect","newSelectedVariant","setSelectedOption","useCallback","name","value","opts","getSelectedVariant","isOptionInStock","option","proposedVariant","availableForSale","sellingPlanGroups","map","sellingPlanGroup","sellingPlans","selectedSellingPlan","setSelectedSellingPlan","undefined","selectedSellingPlanAllocation","sellingPlanAllocations","nodes","edges","find","allocation","sellingPlan","id","variantsConnection","sellingPlanGroupsConnection","_jsx","foundVariant","variant","console","warn","reduce","memo","optionSet","maybeVariantArray","Array","isArray","props","createInstantCheckout","checkoutUrl","useInstantCheckout","loading","setLoading","quantity","variantId","onClick","attributes","passthroughProps","window","location","href","handleBuyNow","lines","merchandiseId","disabled","media","_jsxs","title","vendor","__html","descriptionHtml","useProductOptions","log","isOutOfStock","values","length","_Fragment","checked","med","i","extraProps","mediaContentType","interactionPromptThreshold","ar","disableZoom","image","altText","alt","crop"],"mappings":"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AQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,KAEpB,EAAY,GAAQ,IACxB,GAAG,GAAgB,GAAc,CAAE,EAAC,EAE7B,GAAI,GACX,AAAC,UAAU,EAAY,CAEnB,EAAW,OAAY,SAEvB,EAAW,OAAY,SAEvB,EAAW,KAAU,OAErB,EAAW,MAAW,QAEtB,EAAW,IAAS,KACxB,GAAG,GAAe,GAAa,CAAE,EAAC,EAM3B,GAAI,GACX,AAAC,UAAU,EAAc,CAErB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,MAEtB,EAAa,IAAS,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B,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAErB,EAAa,GAAQ,KAEr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"}