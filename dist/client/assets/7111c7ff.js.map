{"version":3,"file":"7111c7ff.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/components/ProductOptionsProvider/context.js","../../../node_modules/@shopify/hydrogen/dist/esnext/hooks/useMoney/hooks.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/Money/Money.client.js"],"sourcesContent":["import { createContext } from 'react';\nexport const ProductOptionsContext = createContext(null);\n","import { useMemo } from 'react';\nimport { useLocalization } from '../useLocalization/useLocalization';\n/**\n * The `useMoney` hook takes a [MoneyV2 object](https://shopify.dev/api/storefront/reference/common-objects/moneyv2) and returns a\n * default-formatted string of the amount with the correct currency indicator, along with some of the parts provided by\n * [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat).\n */\nexport function useMoney(money) {\n    const { locale } = useLocalization();\n    const amount = parseFloat(money.amount);\n    const options = useMemo(() => ({\n        style: 'currency',\n        currency: money.currencyCode,\n    }), [money.currencyCode]);\n    const defaultFormatter = useLazyFormatter(locale, options);\n    const nameFormatter = useLazyFormatter(locale, {\n        ...options,\n        currencyDisplay: 'name',\n    });\n    const narrowSymbolFormatter = useLazyFormatter(locale, {\n        ...options,\n        currencyDisplay: 'narrowSymbol',\n    });\n    const withoutTrailingZerosFormatter = useLazyFormatter(locale, {\n        ...options,\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n    });\n    const withoutCurrencyFormatter = useLazyFormatter(locale);\n    const withoutTrailingZerosOrCurrencyFormatter = useLazyFormatter(locale, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n    });\n    const isPartCurrency = (part) => part.type === 'currency';\n    // By wrapping these properties in functions, we only\n    // create formatters if they are going to be used.\n    const lazyFormatters = useMemo(() => ({\n        original: () => money,\n        currencyCode: () => money.currencyCode,\n        localizedString: () => defaultFormatter().format(amount),\n        parts: () => defaultFormatter().formatToParts(amount),\n        withoutTrailingZeros: () => amount % 1 === 0\n            ? withoutTrailingZerosFormatter().format(amount)\n            : defaultFormatter().format(amount),\n        withoutTrailingZerosAndCurrency: () => amount % 1 === 0\n            ? withoutTrailingZerosOrCurrencyFormatter().format(amount)\n            : withoutCurrencyFormatter().format(amount),\n        currencyName: () => nameFormatter().formatToParts(amount).find(isPartCurrency)?.value ??\n            money.currencyCode,\n        currencySymbol: () => defaultFormatter().formatToParts(amount).find(isPartCurrency)?.value ??\n            money.currencyCode,\n        currencyNarrowSymbol: () => narrowSymbolFormatter().formatToParts(amount).find(isPartCurrency)\n            ?.value ?? '',\n        amount: () => defaultFormatter()\n            .formatToParts(amount)\n            .filter((part) => ['decimal', 'fraction', 'group', 'integer', 'literal'].includes(part.type))\n            .map((part) => part.value)\n            .join(''),\n    }), [\n        money,\n        amount,\n        nameFormatter,\n        defaultFormatter,\n        narrowSymbolFormatter,\n        withoutCurrencyFormatter,\n        withoutTrailingZerosFormatter,\n        withoutTrailingZerosOrCurrencyFormatter,\n    ]);\n    // Call functions automatically when the properties are accessed\n    // to keep these functions as an implementation detail.\n    return useMemo(() => new Proxy(lazyFormatters, {\n        get: (target, key) => Reflect.get(target, key)?.call(null),\n    }), [lazyFormatters]);\n}\nfunction useLazyFormatter(locale, options) {\n    return useMemo(() => {\n        let memoized;\n        return () => (memoized ??= new Intl.NumberFormat(locale, options));\n    }, [locale, options]);\n}\n","import React from 'react';\nimport { useMoney } from '../../hooks';\n/**\n * The `Money` component renders a string of the Storefront API's\n * [MoneyV2 object](https://shopify.dev/api/storefront/reference/common-objects/moneyv2) according to the\n * `locale` in [the `LocalizationProvider` component](https://shopify.dev/api/hydrogen/components/localization/localizationprovider).\n */\nexport function Money({ data, as, withoutCurrency, withoutTrailingZeros, measurement, measurementSeparator = '/', ...passthroughProps }) {\n    if (!isMoney(data)) {\n        throw new Error(`<Money/> needs a valid 'data' prop that has 'amount' and 'currencyCode'`);\n    }\n    const moneyObject = useMoney(data);\n    const Wrapper = as ?? 'div';\n    let output = moneyObject.localizedString;\n    if (withoutCurrency || withoutTrailingZeros) {\n        if (withoutCurrency && !withoutTrailingZeros) {\n            output = moneyObject.amount;\n        }\n        else if (!withoutCurrency && withoutTrailingZeros) {\n            output = moneyObject.withoutTrailingZeros;\n        }\n        else {\n            // both\n            output = moneyObject.withoutTrailingZerosAndCurrency;\n        }\n    }\n    return (React.createElement(Wrapper, { ...passthroughProps },\n        output,\n        measurement && measurement.referenceUnit && (React.createElement(React.Fragment, null,\n            measurementSeparator,\n            measurement.referenceUnit))));\n}\n// required in order to narrow the money object down and make TS happy\nfunction isMoney(maybeMoney) {\n    return (typeof maybeMoney.amount === 'string' &&\n        !!maybeMoney.amount &&\n        typeof maybeMoney.currencyCode === 'string' &&\n        !!maybeMoney.currencyCode);\n}\n"],"names":["createContext","useMemo"],"mappings":"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"}